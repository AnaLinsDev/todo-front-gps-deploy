{"version":3,"sources":["redux/user/user.selector.js","pages/home/home.jsx","redux/date/date.selector.js","redux/date/date.types.js","components/calendar/calendar.jsx","redux/date/date.actions.js","redux/tasks/tasks.types.js","redux/tasks/tasks.actions.js","components/taskPainel/taskPainel.jsx","redux/tasks/tasks.selector.js","components/taskUpdate/taskUpdate.component.jsx","components/painel/painel.jsx","components/taskPreview/taskPreview.jsx","pages/scheduler/scheduler.jsx","pages/perfil/perfil.jsx","pages/dashboard/dashboard.jsx","redux/user/user.type.js","redux/user/user.actions.js","components/signin/signin.jsx","components/signup/signup.jsx","pages/signin-signup/signin-signup.jsx","components/menu-side-bar/menu-side-bar.jsx","App.js","redux/date/date.reducer.js","redux/tasks/task.utils.js","redux/tasks/tasks.reducer.js","redux/user/user.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["selectUser","createSelector","state","user","userr","mapStateToProps","createStructuredSelector","connect","name","selectSelectedDate","date","selectDate","DateActionTypes","dispatch","setSelectedDate","type","payload","useState","Date","value","setValue","toLocaleDateString","className","onChange","showFixedNumberOfWeeks","TaskActionTypes","getTaskToUpdate","task","removeTask","setStatusDowngrade","setStatusUpgrade","handleClick","taskInfo","method","endpoint","level","status","fetch","id","headers","body","JSON","stringify","title","description","catch","err","onClick","selectTask","selectTaskList","taskList","selectTaskUpdating","taskUpdating","setTaskById","dateTask","split","dateValue","setTitle","setDate","setDescription","required","placeholder","event","target","cols","rows","console","log","dateSplit","dateOriginal","taskUpdated","then","resp","json","Painel","props","newProps","this","setState","res","out","taskupdate","setTasks","map","Component","addTask","obj","SchedulerPage","email","DiagramsPage","UserActionTypes","addUser","SignIn","handleSubmit","a","preventDefault","password","undefined","alert","idLogado","nameLogado","emailLogado","handleChange","onSubmit","React","SignUp","displayName","confirmPassword","SignInSignUpPage","menuCollapse","setMenuCollapse","collapsed","iconShape","active","icon","to","App","exact","path","component","HomePage","render","INITIAL_STATE","selectedDateReducer","action","addTaskToList","listOfTasks","taskToAdd","removeTaskToList","taskToRemove","filter","t","updateTask","taskReducer","userReducer","persistConfig","key","storage","rootReducer","combineReducers","persistReducer","middlewarers","logger","store","createStore","applyMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d1a9508.chunk.js","sourcesContent":["import {createSelector} from 'reselect'\r\n\r\nconst theUser = state => state.user\r\n\r\nexport const selectUser = createSelector(\r\n    [theUser],\r\n    (userr) => userr.user\r\n)","import React from 'react';\r\nimport './home.scss'\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\nconst HomePage = ({user}) => (\r\n    <div>\r\n        <h1>Bem vindo(a)  { user.name }</h1>\r\n    </div>\r\n);\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user : selectUser\r\n    })\r\n\r\n  \r\nexport default connect(mapStateToProps)(HomePage)\r\n//export default HomePage","import {createSelector} from 'reselect'\r\n\r\nconst selectDate = state => state.date\r\n\r\nexport const selectSelectedDate = createSelector(\r\n    [selectDate],\r\n    (date) => date.selectDate\r\n)","export const DateActionTypes = {\r\n    SET_SELECTED_DATE: 'SET_SELECTED_DATE'\r\n}","import React, { useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport './calendar.scss'\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {selectSelectedDate} from '../../redux/date/date.selector'\r\nimport {createStructuredSelector} from 'reselect'\r\nimport { setSelectedDate } from '../../redux/date/date.actions';\r\n\r\n\r\nfunction CalendarComponent({date, setSelectedDate}){\r\n  \r\nconst [value, setValue] = useState(new Date())\r\n\r\nsetSelectedDate(value.toLocaleDateString())\r\n  \r\nreturn(\r\n      <div className='calendar'>\r\n      <Calendar\r\n        onChange={setValue}\r\n        value={value}\r\n        showFixedNumberOfWeeks={true}\r\n      />\r\n      </div>\r\n)\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   date : selectSelectedDate\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setSelectedDate: date => dispatch( setSelectedDate(date) )\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarComponent)\r\n","import {DateActionTypes} from './date.types'\r\n\r\nexport const setSelectedDate = date => ({\r\n    type: DateActionTypes.SET_SELECTED_DATE,\r\n    payload: date\r\n})","export const TaskActionTypes = {\r\n    SET_TASKS: 'SET_TASKS',\r\n    ADD_TASK: 'ADD_TASK',\r\n    REMOVE_TASK:'REMOVE_TASK',\r\n    SET_STATUS_DOWNGRADE:'SET_STATUS_DOWNGRADE',\r\n    SET_STATUS_UPGRADE:'SET_STATUS_UPGRADE',\r\n    UPDATE_TASK : 'UPDATE_TASK',\r\n    GET_TASK_TO_UPDATE : 'GET_TASK_TO_UPDATE'\r\n}","import {TaskActionTypes} from './tasks.types'\r\n\r\nexport const setTasks = (task) => ({\r\n    type: TaskActionTypes.SET_TASKS,\r\n    payload: task\r\n})\r\n\r\nexport const addTask = (task) => ({\r\n    type: TaskActionTypes.ADD_TASK,\r\n    payload: task\r\n})\r\n\r\nexport const removeTask = (task) => ({\r\n    type: TaskActionTypes.REMOVE_TASK,\r\n    payload: task\r\n})\r\n\r\nexport const setStatusDowngrade = (task) => ({\r\n    type: TaskActionTypes.SET_STATUS_DOWNGRADE,\r\n    payload: task\r\n})\r\n\r\nexport const setStatusUpgrade = (task) => ({\r\n    type: TaskActionTypes.SET_STATUS_UPGRADE,\r\n    payload: task\r\n})\r\n\r\nexport const setTaskById = (task) => ({\r\n    type: TaskActionTypes.UPDATE_TASK,\r\n    payload: task\r\n})\r\n\r\nexport const getTaskToUpdate = (task) => ({\r\n    type: TaskActionTypes.GET_TASK_TO_UPDATE,\r\n    payload: task\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './taskPainel.scss'\r\nimport { BiEditAlt } from \"react-icons/bi\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { HiCheck } from \"react-icons/hi\";\r\nimport { RiReplyLine } from \"react-icons/ri\";\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { removeTask, setStatusDowngrade, setStatusUpgrade, getTaskToUpdate } from '../../redux/tasks/tasks.actions';\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\n\r\nfunction TaskPainel({task, user, removeTask, setStatusDowngrade, setStatusUpgrade, getTaskToUpdate}){\r\n\r\n    const handleClick = (taskInfo, method, endpoint, level=null) => {\r\n\r\n      if (level == 'up') {\r\n        setStatusUpgrade(taskInfo)\r\n        if     (taskInfo.status == 'DOING') { taskInfo.status = 'DONE' }\r\n        else if (taskInfo.status == 'TODO') { taskInfo.status = 'DOING'}\r\n      }\r\n     else if (level == 'down'){\r\n        setStatusDowngrade(taskInfo)\r\n        if     (taskInfo.status == 'DOING'){ taskInfo.status = 'TODO' }\r\n        else if (taskInfo.status == 'DONE'){ taskInfo.status = 'DOING'}\r\n      }\r\n\r\n      fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/${user.id}/${endpoint}/${taskInfo.id}`,\r\n         { \r\n          method: method ,\r\n          headers: {\"Content-type\": \"application/json\"},\r\n          body: JSON.stringify({\r\n            id : taskInfo.id,\r\n            title : taskInfo.title,\r\n            description : taskInfo.description,\r\n            status : taskInfo.status,\r\n            date : taskInfo.date\r\n          })\r\n        })\r\n         .catch(err => { throw  err })\r\n\r\n      }\r\n      \r\n\r\n\r\n    return (\r\n    <div className='task-painel'>\r\n    {\r\n    task.status == \"DOING\"\r\n     ? \r\n    <div className = 'icons-sup'>\r\n\r\n    <RiReplyLine className='undone icon' \r\n    onClick={() => {handleClick(task, 'PUT', 'atualizartask', 'down')}}/> \r\n\r\n    <HiCheck className='done icon'\r\n    onClick={() => {handleClick(task, 'PUT', 'atualizartask', 'up')}} />\r\n    \r\n    </div>\r\n    : task.status == \"TODO\" ?\r\n    <div className = 'icons-sup-right'>\r\n    <HiCheck className='done icon'\r\n    onClick={() => {handleClick(task, 'PUT', 'atualizartask', 'up')}} />\r\n    </div>\r\n    :\r\n    <div className = 'icons-sup'>\r\n\r\n    <RiReplyLine className='undone icon' \r\n    onClick={() => {handleClick(task, 'PUT', 'atualizartask', 'down')}}/> \r\n    </div>\r\n    }\r\n\r\n     <h2>{task.title}  </h2>\r\n     <p>{task.description}</p>\r\n     <div className = 'icons-inf'>\r\n\r\n     <RiDeleteBin5Line className='delete icon' \r\n     onClick={() => {handleClick(task, 'DELETE', 'removertask'); removeTask(task)}} />\r\n\r\n     <BiEditAlt\r\n      className='update icon' onClick={() => {getTaskToUpdate(task)}} /> \r\n\r\n     </div>\r\n    </div>\r\n    )}\r\n\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  user : selectUser,\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n  removeTask: task => dispatch(removeTask(task)) ,\r\n\r\n  setStatusDowngrade: task => dispatch(setStatusDowngrade(task)) ,\r\n  setStatusUpgrade: task => dispatch(setStatusUpgrade(task)) ,\r\n\r\n  getTaskToUpdate: task => dispatch(getTaskToUpdate(task)) \r\n\r\n  })\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskPainel)","import {createSelector} from 'reselect'\r\n\r\nconst selectTask = state => state.task\r\n\r\nexport const selectTaskList = createSelector(\r\n    [selectTask],\r\n    (task) => task.taskList\r\n)\r\n\r\nexport const selectTaskUpdating = createSelector(\r\n    [selectTask],\r\n    (task) => task.taskUpdating\r\n)","import React, { useState } from \"react\";\r\nimport \"./taskUpdate.styles.scss\";\r\n\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { setTaskById, getTaskToUpdate } from '../../redux/tasks/tasks.actions';\r\nimport { selectUser } from '../../redux/user/user.selector'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { selectTaskUpdating } from \"../../redux/tasks/tasks.selector\";\r\n\r\nfunction TaskUpdate ({task, setTaskById, getTaskToUpdate, user}){\r\n  \r\n  const dateTask = task.date.split('/')\r\n  const dateValue = dateTask[2] + '-' + dateTask[1] + '-' + dateTask[0]\r\n\r\n\r\n  const [title, setTitle] = useState(task.title)\r\n  const [date, setDate] = useState(dateValue)\r\n  const [description, setDescription] = useState(task.description)\r\n\r\n  const handleClick = () => {\r\n\r\n    console.log(task)\r\n    console.log(task)\r\n    console.log(task)\r\n\r\n    const dateSplit = date.split('-')\r\n    const dateOriginal = dateSplit[2] + '/' + dateSplit[1] + '/' + dateSplit[0]\r\n\r\n    const taskUpdated = {\r\n      id : task.id,\r\n      title : title != task.title ? title : task.title,\r\n      date :  dateOriginal != task.date ? dateOriginal : task.date,\r\n      description : description != task.description ? description : task.description,\r\n      status : task.status\r\n    }\r\n\r\n    setTaskById(taskUpdated)\r\n    getTaskToUpdate(null)\r\n\r\n    fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/${user.id}/atualizartask/${taskUpdated.id}`,\r\n    { \r\n     method: \"PUT\" ,\r\n     headers: {\"Content-type\": \"application/json\"},\r\n     body: JSON.stringify({\r\n       id : taskUpdated.id,\r\n       title : taskUpdated.title,\r\n       description : taskUpdated.description,\r\n       status : taskUpdated.status,\r\n       date : taskUpdated.date\r\n     })\r\n   })\r\n    .then(resp => resp.json() )\r\n    .catch(err => { throw  err })\r\n\r\n  }\r\n\r\n\r\n  return(\r\n    \r\n  <div className=\"task-update\">\r\n    <div className=\"create-task-title\">\r\n      <h2>Update Task</h2>\r\n    </div>\r\n    <form className=\"task-form\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"title\"\r\n        id=\"form-title\"\r\n        value={title}\r\n        required\r\n        placeholder=\"Title\"\r\n        onChange={event => setTitle(event.target.value)}      />\r\n\r\n      <textarea\r\n        name=\"description\"\r\n        id=\"description\"\r\n        placeholder=\"Description\"\r\n        value={description}\r\n        required\r\n        cols=\"30\"\r\n        rows=\"10\"\r\n        onChange={event => setDescription(event.target.value)}      />\r\n        \r\n      <div className=\"form-date\">\r\n      <input  \r\n          required \r\n          type=\"date\" \r\n          value={date}\r\n          name=\"date\" \r\n          id=\"date\" \r\n          onChange={event => setDate(event.target.value)}       />\r\n      </div>\r\n      <div className='buttons-update-div'>\r\n      <button type=\"button\" className=\"btn send\"\r\n          onClick={() => {handleClick()}} \r\n          >Update task</button>\r\n       <button type=\"button\" className=\"btn cancel\"\r\n          onClick={() => {getTaskToUpdate(null)}} \r\n          >Cancel</button>\r\n        </div>\r\n    </form>\r\n  </div>\r\n\r\n\r\n  )}\r\n\r\n  const mapStateToProps = createStructuredSelector({\r\n    user : selectUser,\r\n    task : selectTaskUpdating\r\n    })\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    setTaskById: task => dispatch(setTaskById(task))  ,\r\n    getTaskToUpdate  : task => dispatch(getTaskToUpdate(task))  \r\n    })\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskUpdate)\r\n","import React, { Component } from 'react';\r\nimport TaskPainel from '../taskPainel/taskPainel';\r\nimport './painel.scss'\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {selectSelectedDate} from '../../redux/date/date.selector'\r\nimport {selectTaskList, selectTaskUpdating} from '../../redux/tasks/tasks.selector'\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {setTasks} from '../../redux/tasks/tasks.actions'\r\nimport {createStructuredSelector} from 'reselect'\r\nimport TaskUpdate from '../taskUpdate/taskUpdate.component'\r\n\r\n\r\nclass Painel extends Component{\r\nconstructor(props){\r\n    super(props)\r\n    this.state = {\r\n        task : [],\r\n    \r\n    }\r\n}\r\n\r\nUNSAFE_componentWillReceiveProps(newProps){\r\n    this.setState( { task : newProps.task} )\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n    console.log(\"ENTROU componentDidMount PAINEL\")\r\n\r\n    fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/${this.props.user.id}/tasks`, \r\n    { method: 'GET' })\r\n    .then (res => res.json() )\r\n    .then (out => {\r\n        this.setState({task : out})\r\n    })\r\n    .catch(err => { throw  err })\r\n   \r\n}\r\n\r\n\r\n\r\nrender(){\r\n\r\n    console.log(\"ENTROU RENDER PAINEL\")\r\n    const date  = this.props.date;\r\n    const task  = this.state.task;\r\n    const taskupdate  = this.props.taskupdate;\r\n\r\n    this.props.setTasks(task)\r\n\r\n    console.log(task)\r\n\r\n    return (\r\n    \r\n    <div className='painel'>\r\n    <h1> Date  {date}</h1>\r\n    {taskupdate != null ? <TaskUpdate />  : \r\n    <div className='painel-main'>\r\n    \r\n        <div className='painel-colunm'>\r\n            <p className='type'>TODO</p>\r\n            <div className='painel-colunm-tasks'>\r\n                {task.map(task => (task.status == \"TODO\" && task.date == date ? <TaskPainel key={task.id} task = {task}/> : ''))}\r\n            </div>\r\n        </div>\r\n\r\n        <div className='painel-colunm'>\r\n            <p className='type'>DOING</p>\r\n            <div className='painel-colunm-tasks'>\r\n                {task.map(task => (task.status == \"DOING\" && task.date == date ? <TaskPainel key={task.id} task = {task}/> : ''))}\r\n            </div>\r\n        </div>\r\n\r\n        <div className='painel-colunm'>\r\n            <p className='type'>DONE</p>\r\n            <div className='painel-colunm-tasks'>\r\n                {task.map(task => (task.status == \"DONE\" && task.date == date ? <TaskPainel key={task.id} task = {task}/> : ''))}\r\n            </div>\r\n        </div>\r\n    \r\n    </div>\r\n}\r\n    </div>\r\n    )\r\n}\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user : selectUser,\r\n    date : selectSelectedDate, \r\n    task : selectTaskList,\r\n    taskupdate : selectTaskUpdating\r\n    })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setTasks: task => dispatch(setTasks(task)) \r\n  })\r\n\r\n  \r\n\r\n export default connect(mapStateToProps, mapDispatchToProps)(Painel)\r\n\r\n","import React, { useState } from \"react\";\r\nimport \"./taskPreview.scss\";\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { addTask } from '../../redux/tasks/tasks.actions';\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\nfunction TaskPreview ({addTask, user}){\r\n\r\n  const [date, setDate] = useState('')\r\n  const [title, setTitle] = useState('')\r\n  const [description, setDescription] = useState('')\r\n\r\n  const [response, setResponse] = useState('')\r\n\r\n  const handleClick = () => {\r\n\r\n    const dateSplit = date.split('-')\r\n    const dateOriginal = dateSplit[2] + '/' + dateSplit[1] + '/' + dateSplit[0]\r\n\r\n    const task = {\r\n      title : title,\r\n      description : description,\r\n      date :  dateOriginal,\r\n      status : 'TODO'\r\n    }\r\n\r\n    fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/adicionartask/${user.id}`,\r\n       { \r\n        method: 'POST' ,\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n          \"Content-type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          title : task.title,\r\n          description : task.description,\r\n          status : task.status,\r\n          date : task.date\r\n        })\r\n      })\r\n       .then( res => res.json())\r\n       .then( obj => addTask(obj))\r\n       .catch(err => { throw  err })\r\n    }\r\n\r\n  return(\r\n  <div className=\"task-preview\">\r\n    <div className=\"create-task-title\">\r\n      <h2>Task</h2>\r\n    </div>\r\n    <form className=\"task-form\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"title\"\r\n        id=\"form-title\"\r\n        required\r\n        placeholder=\"Title\"\r\n        onChange={event => setTitle(event.target.value)}      />\r\n\r\n      <textarea\r\n        name=\"description\"\r\n        id=\"description\"\r\n        placeholder=\"Description\"\r\n        required\r\n        cols=\"30\"\r\n        rows=\"10\"\r\n        onChange={event => setDescription(event.target.value)}      >\r\n        </textarea>\r\n        \r\n      <div className=\"form-date\">\r\n      <input  \r\n          required \r\n          type=\"date\" \r\n          name=\"date\" \r\n          id=\"date\" \r\n          onChange={event => setDate(event.target.value)}\r\n      />\r\n      </div>\r\n      \r\n      <button type=\"button\" className=\"btn-send\"\r\n          onClick={() => {handleClick()}} \r\n          >Add to Painel</button>\r\n    </form>\r\n  </div>\r\n  )}\r\n\r\n  const mapStateToProps = createStructuredSelector({\r\n    user : selectUser,\r\n    })\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    addTask: task => dispatch(addTask(task)) ,\r\n    })\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskPreview)\r\n\r\n","import React, { Component } from 'react';\r\nimport './scheduler.scss'\r\n\r\nimport CalendarComponent from '../../components/calendar/calendar';\r\nimport Painel from '../../components/painel/painel';\r\nimport TaskPreview from '../../components/taskPreview/taskPreview'\r\n\r\n\r\nconst SchedulerPage = ({task}) => {\r\n\r\n\r\n    return (\r\n    <div className='scheduler'>\r\n    <div className='calendar-task'>\r\n        <CalendarComponent />\r\n        <TaskPreview />\r\n    </div>\r\n    <Painel className='painel'/>\r\n    </div>\r\n    )\r\n    }\r\n    \r\nexport default SchedulerPage\r\n\r\n","import React from 'react';\r\nimport './perfil.scss'\r\n\r\n//redux\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {connect} from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\n\r\nconst PerfilPage = ({user}) => (\r\n    <div>\r\n        <h1>My Info</h1>\r\n        <h2>Name: {user.name}</h2>\r\n        <h2>Email: {user.email}</h2>\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user : selectUser,\r\n    })\r\n  \r\n\r\n export default connect(mapStateToProps)(PerfilPage)\r\n\r\n","import React from 'react';\r\nimport './dashboard.scss'\r\n\r\nconst DiagramsPage = () => (\r\n    <div>\r\n        <h1>Dashboard !!!</h1>\r\n    </div>\r\n);\r\n\r\nexport default DiagramsPage","export const UserActionTypes = {\r\n    ADD_USER: 'ADD_USER',\r\n}","import {UserActionTypes} from './user.type'\r\n\r\nexport const addUser = (user) => (\r\n    {\r\n        type: UserActionTypes.ADD_USER,\r\n        payload: user\r\n    }\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './signin.scss'\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { addUser } from '../../redux/user/user.actions';\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            email:'',\r\n            password:'',\r\n\r\n            idLogado: '',\r\n            nameLogado : '' , \r\n            emailLogado : ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = async event => {\r\n        // Quando o usuário apertar em \"SIGN IN\", virá para cá\r\n        event.preventDefault()\r\n\r\n        // o this state está com os valores digitas por conta do handleChange\r\n        const {email, password} = this.state\r\n\r\n        fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/login`,\r\n        { \r\n         method: 'POST' ,\r\n         headers: {\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Content-type\": \"application/json\"\r\n        },\r\n         body: JSON.stringify({\r\n            name     :       '',\r\n            email    :       email,\r\n            password :       password\r\n         })\r\n       })\r\n       .then( res =>  res.json())\r\n       .then( obj => (obj.name  == '' || obj.name == undefined) ? alert(\" Email ou senha incorretos !! \") : this.setState({ idLogado: obj.id ,nameLogado : obj.name , emailLogado : obj.email}))\r\n       .catch(err => { alert(\"Error: \" + err); })\r\n    }\r\n\r\n    handleChange = event => {\r\n        // Toda vez que o input for alterado, o state receberá o valor\r\n        const {value, name} = event.target\r\n        \r\n        this.setState({[name]: value })\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        this.props.addUser({id: this.state.idLogado, name: this.state.nameLogado, email : this.state.emailLogado})\r\n\r\n        return(\r\n        <div className='sign-in'>\r\n                <h2 className='title'>I already have a account</h2>\r\n                <span> Sign in with you email and password</span>\r\n\r\n                <form className='form' onSubmit={this.handleSubmit}>\r\n                    <div className='celula'>\r\n                        <label className='label'>Email: </label>\r\n                        <input \r\n                        className='input'\r\n                        name='email' \r\n                        type='email' \r\n                        onChange={this.handleChange} \r\n                        required/>\r\n                    </div>\r\n                    <div className='celula'>\r\n                        <label className='label'>Password: </label>  \r\n                        <input\r\n                        className='input'\r\n                        name='password' \r\n                        type='password' \r\n                        onChange={this.handleChange}\r\n                        required/>\r\n                    </div>\r\n\r\n                    <div className='buttons'>\r\n                        <button className='custom-button' type='submit'>SIGN IN </button>\r\n                    </div> \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addUser: user => dispatch(addUser(user)) \r\n    })\r\n    \r\nexport default connect(null, mapDispatchToProps)(SignIn)\r\n\r\n","import React from 'react';\r\nimport './signup.scss'\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { addUser } from '../../redux/user/user.actions';\r\n\r\n\r\nclass SignUp extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.state = {\r\n            displayName     : '',\r\n            email           : '',\r\n            password        : '',\r\n            confirmPassword : '',\r\n\r\n            idLogado: '',\r\n            nameLogado      : '',\r\n            emailLogado     : ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n \r\n        const user = {\r\n            displayName : this.state.displayName,\r\n            email : this.state.email,\r\n            password : this.state.password,\r\n            confirmPassword : this.state.confirmPassword\r\n        }\r\n\r\n        this.setState({\r\n            displayName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n          });\r\n\r\n        if (user.password != user.confirmPassword) {\r\n            console.log( user.password + \" --- \" + user.confirmPassword)\r\n            alert(\"passwords don't match\");\r\n            return;\r\n          }else{\r\n\r\n        fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/criarusuario`,\r\n        { \r\n         method: 'POST' ,\r\n         headers: {\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Content-type\": \"application/json\"\r\n        },\r\n         body: JSON.stringify({\r\n            name :        user.displayName,\r\n            email :       user.email,\r\n            password :    user.password\r\n         })\r\n\r\n       })\r\n        .then( res => res.json())\r\n        .then( obj => this.setState({ idLogado: obj.id , nameLogado : obj.name , emailLogado : obj.email}))\r\n        .catch(err => { alert(\"Error: \" + err); })\r\n\r\n    }\r\n      };\r\n\r\n    handleChange = event => {\r\n       // Toda vez que o input for alterado, o state receberá o valor\r\n        const { name, value } = event.target\r\n        this.setState({[name]: value})\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        this.props.addUser({id: this.state.idLogado, name: this.state.nameLogado, email : this.state.emailLogado})\r\n\r\n        return(\r\n            <div className='sign-up'>\r\n                <h2 className='title'>I do not have a account</h2>\r\n                <span>Sign up with your email and password</span>\r\n                \r\n                <form className='form' onSubmit={this.handleSubmit}>\r\n                <div className='celula'>\r\n                        <label className='label'>Name: </label>\r\n                        <input \r\n                        className='input'\r\n                        name='displayName' \r\n                        type='text' \r\n                        onChange={this.handleChange} \r\n                        required/>\r\n                    </div>\r\n                    <div className='celula'>\r\n                        <label className='label'>Email: </label>\r\n                        <input \r\n                        className='input'\r\n                        name='email' \r\n                        type='email' \r\n                        onChange={this.handleChange} \r\n                        required/>\r\n                    </div>\r\n                    <div className='celula'>\r\n                        <label className='label'>Password: </label>  \r\n                        <input\r\n                        className='input'\r\n                        name='password' \r\n                        type='password' \r\n                        onChange={this.handleChange}\r\n                        required/>\r\n                    </div>\r\n                    <div className='celula'>\r\n                        <label className='label'>Confirm Password: </label>\r\n                        <input \r\n                        className='input'\r\n                        name='confirmPassword' \r\n                        type='password' \r\n                        onChange={this.handleChange} \r\n                        required/>\r\n                    </div>\r\n                    <div className='buttons'>\r\n                        <button className='custom-button' type='submit'\r\n                                  onClick={this.handleClick}\r\n                                  >SIGN UP </button>\r\n                    </div> \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addUser: user => dispatch(addUser(user)) \r\n    })\r\n    \r\nexport default connect(null, mapDispatchToProps)(SignUp)\r\n","import React from 'react';\r\nimport './signin-signup.scss'\r\n\r\nimport SignIn from '../../components/signin/signin';\r\nimport SignUp from '../../components/signup/signup';\r\n\r\nconst SignInSignUpPage = () => (\r\n    <div className='sign-in-and-sign-up'>\r\n        <SignIn />\r\n        <SignUp />\r\n    </div>\r\n);\r\n\r\nexport default SignInSignUpPage","import {\r\n  ProSidebar,\r\n  Menu,\r\n  MenuItem,\r\n  SidebarHeader,\r\n  SidebarFooter,\r\n  SidebarContent,\r\n} from \"react-pro-sidebar\";\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport React, { useState } from 'react';\r\n\r\nimport { FaList, FaRegHeart } from \"react-icons/fa\";\r\nimport { FiHome, FiLogOut, FiArrowLeftCircle, FiArrowRightCircle } from \"react-icons/fi\";\r\nimport { RiPencilLine } from \"react-icons/ri\";\r\nimport { BiArrowToRight } from \"react-icons/bi\";\r\nimport { BsFillBarChartFill } from \"react-icons/bs\";\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport  './menu-side-bar.scss'\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport { addUser } from '../../redux/user/user.actions';\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\nfunction MenuSideBar({user, addUser}) {\r\n\r\n  const [menuCollapse, setMenuCollapse] = useState(false);\r\n\r\n  const menuIconClick = () => {\r\n    menuCollapse ? setMenuCollapse(false) : setMenuCollapse(true);\r\n  };\r\n\r\n  console.log(\"USUARIO : \" +  user.name)\r\n\r\n  function logOut(){\r\n      addUser({\r\n        name: '',\r\n        email: ''\r\n    })\r\n  }\r\n\r\n  return(\r\n\r\n        <div className='menu'>\r\n        <ProSidebar \r\n        collapsed = {menuCollapse} >\r\n          <SidebarHeader >\r\n          <div className=\"logotext\" >\r\n          \r\n              <h1>{menuCollapse ? <p>GPS</p> : <p ><BsFillBarChartFill className='big-icon'/>  Planner </p>}</h1>\r\n            </div>\r\n            <div className=\"closemenu\" onClick={menuIconClick}>\r\n\r\n              {menuCollapse ? (\r\n                <FiArrowRightCircle className='arrow-icon'/>\r\n              ) : (\r\n                <FiArrowLeftCircle  className='arrow-icon'/>\r\n              )}\r\n            </div>\r\n          </SidebarHeader>\r\n          <SidebarContent >\r\n            <Menu iconShape=\"square\">\r\n              <MenuItem active={true} icon={<FiHome />} className='menu-item'>Home<Link to=\"/\" /></MenuItem>\r\n              <MenuItem icon={<FaList />} className='menu-item'>Dashboards<Link to=\"/dashboard\" /></MenuItem>\r\n              <MenuItem icon={<FaRegHeart />} className='menu-item'>You<Link to=\"/perfil\" /></MenuItem>\r\n              <MenuItem icon={<RiPencilLine />} className='menu-item'>Calendar Planner<Link to=\"/scheduler\" /></MenuItem>\r\n            </Menu>\r\n          </SidebarContent>\r\n\r\n          {/* AQUI SÓ VAI FUNCIONAR MESMO QUANDO O USUARIO ESTIVER FUNCIONANDO NO BACK E FRONT */}\r\n          <SidebarFooter >\r\n            <Menu iconShape=\"square\">\r\n              {user.name == '' && user.email == ''\r\n              ?  <MenuItem icon={<BiArrowToRight   />}  className='menu-item'>Sign In or Sign Up <Link to=\"/signin-signup\" /></MenuItem>\r\n              :  <MenuItem icon={<FiLogOut/>} className='menu-item' onClick={() => logOut()}>Logout</MenuItem>   \r\n              }\r\n              \r\n            </Menu>\r\n          </SidebarFooter>\r\n        </ProSidebar>\r\n        </div>\r\n\r\n  )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  user : selectUser\r\n  })\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addUser: user => dispatch(addUser(user)) \r\n  })\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuSideBar)\r\n//export default MenuSideBar","import './App.css';\nimport React, { Component } from 'react';\n\nimport { Switch, Route, Redirect, BrowserRouter as Router} from 'react-router-dom';\n\nimport HomePage from './pages/home/home';\nimport SchedulerPage from './pages/scheduler/scheduler';\nimport PerfilPage from './pages/perfil/perfil';\nimport DiagramsPage from './pages/dashboard/dashboard'\nimport SignInSignUpPage from './pages/signin-signup/signin-signup';\n\nimport MenuSideBar from './components/menu-side-bar/menu-side-bar'\n\n//redux\nimport { connect } from 'react-redux';\nimport {selectUser} from './redux/user/user.selector'\nimport {createStructuredSelector} from 'reselect'\n\nclass App extends Component {\n\n  render(){\n\n  return (\n\n    <div className='App'>\n    <Router>\n      <MenuSideBar className='menu'/>\n\n      <div className='content'>\n      <Switch >\n      \n      <Route exact path='/' component={HomePage} />\n\n      <Route path='/perfil' render={ () => this.props.user.name == '' ? \n        (<Redirect to='/'/>) :\n        (<PerfilPage />)\n      } />\n\n      <Route path='/scheduler' render={ () => this.props.user.name == '' ? \n              (<Redirect to='/'/>) :\n              (<SchedulerPage />)\n            } />\n\n      <Route path='/dashboard' render={ () => this.props.user.name == '' ? \n              (<Redirect to='/'/>) :\n              (<DiagramsPage />)\n            } />\n\n      <Route path='/signin-signup' render={ () => this.props.user.name != '' ? \n              (<Redirect to='/'/>) :\n              (<SignInSignUpPage />)\n      } />\n      \n      </Switch>\n      </div>\n\n    </Router>\n    </div>\n  );\n  }\n}\n\n\nconst mapStateToProps = createStructuredSelector({\n  user : selectUser\n  })\n\nexport default connect(mapStateToProps)(App);\n","  \r\nimport {DateActionTypes} from './date.types'\r\n\r\n\r\nconst INITIAL_STATE ={\r\n    selectDate: null\r\n}\r\n\r\nconst selectedDateReducer = (state =  INITIAL_STATE, action) => {\r\n\r\n    switch (action.type){\r\n        case DateActionTypes.SET_SELECTED_DATE:\r\n            return {\r\n                ...state,\r\n                selectDate: action.payload\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\nexport default selectedDateReducer","export const addTaskToList = (listOfTasks, taskToAdd) => {\r\n    return [...listOfTasks, {...taskToAdd}]\r\n}\r\n\r\nexport const removeTaskToList = (listOfTasks, taskToRemove) => {  \r\n    return listOfTasks.filter(t => t.id != taskToRemove.id)\r\n};\r\n\r\nexport const setStatusDowngrade = (listOfTasks, task) => {\r\n    return listOfTasks.map(t => \r\n\r\n        (t.id == task.id && t.status == 'DOING') ?\r\n        {\r\n            ...t, \r\n            status : 'TODO'\r\n        }\r\n\r\n        : (t.id == task.id && t.status == 'DONE') ?\r\n        {\r\n            ...t, \r\n            status : 'DOING'\r\n        } \r\n\r\n        : t\r\n    )\r\n};\r\n\r\nexport const setStatusUpgrade = (listOfTasks, task) => {\r\n    \r\n    return listOfTasks.map(t => \r\n\r\n        (t.id == task.id && t.status == 'DOING') ?\r\n        {\r\n            ...t, \r\n            status : 'DONE'\r\n        }\r\n\r\n        : (t.id == task.id && t.status == 'TODO') ?\r\n        {\r\n            ...t, \r\n            status : 'DOING'\r\n        } \r\n\r\n        : t\r\n\r\n    )\r\n}\r\n\r\n\r\nexport const updateTask = (listOfTasks, task) => {\r\n    \r\n    return listOfTasks.map(t => \r\n\r\n        (t.id == task.id) ?\r\n        {\r\n            id: task.id,\r\n            title : task.title,\r\n            description : task.description,\r\n            date :  task.date,\r\n            status : task.status\r\n        }\r\n\r\n        : t\r\n\r\n    )\r\n}\r\n","import {TaskActionTypes} from './tasks.types'\r\nimport {addTaskToList, updateTask,  removeTaskToList, setStatusDowngrade, setStatusUpgrade} from './task.utils'\r\n\r\nconst INITIAL_STATE ={\r\n    taskList: [],\r\n\r\n    taskUpdating : null\r\n}\r\n\r\nconst taskReducer = (state =  INITIAL_STATE, action) => {\r\n\r\n    switch (action.type){\r\n        case TaskActionTypes.SET_TASKS:\r\n            return {\r\n                ...state,\r\n                taskList: action.payload\r\n            }\r\n        case TaskActionTypes.ADD_TASK:\r\n            return {\r\n                ...state,\r\n                taskList: addTaskToList(state.taskList, action.payload)\r\n            }\r\n        case TaskActionTypes.REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                taskList: removeTaskToList(state.taskList, action.payload)\r\n            }\r\n        case TaskActionTypes.SET_STATUS_DOWNGRADE:\r\n            return {\r\n                ...state,\r\n                taskList: setStatusDowngrade(state.taskList, action.payload)\r\n            }\r\n        case TaskActionTypes.SET_STATUS_UPGRADE:\r\n            return {\r\n                ...state,\r\n                taskList: setStatusUpgrade(state.taskList, action.payload)\r\n            }\r\n        case TaskActionTypes.UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                taskList:  updateTask(state.taskList, action.payload)\r\n                }\r\n\r\n        case TaskActionTypes.GET_TASK_TO_UPDATE:\r\n            return {\r\n                ...state,\r\n                taskUpdating: action.payload\r\n                }\r\n\r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\nexport default taskReducer","import {UserActionTypes} from './user.type'\r\n\r\nconst INITIAL_STATE ={\r\n    user: {\r\n        id: '',\r\n        name: '',\r\n        email: ''\r\n    }\r\n}\r\n\r\nconst userReducer = (state =  INITIAL_STATE, action) => {\r\n    \r\n    switch (action.type){\r\n        case UserActionTypes.ADD_USER:\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n\r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\nexport default userReducer","import {combineReducers } from 'redux'\r\n\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport selectedDateReducer from './date/date.reducer';\r\nimport taskReducer from './tasks/tasks.reducer';\r\nimport userReducer from './user/user.reducer';\r\n\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n  };\r\n  \r\n  const rootReducer = combineReducers({\r\n      date : selectedDateReducer,\r\n      task : taskReducer,\r\n      user : userReducer\r\n\r\n})\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import { createStore, applyMiddleware} from 'redux'\r\nimport logger from 'redux-logger'\r\n\r\n\r\nimport rootReducer from './root-reducer'\r\n\r\n// o  middlewarer logger será útil para debuggar, \r\n// já que irá printar o que está acontecendo\r\nconst middlewarers = [logger] \r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewarers))\r\n\r\n\r\n\r\nexport default {store};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//redux\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store';\n/*\nTO DEPLOY:\n\ngit add .\n\ngit commit -m \"\"\n\ngit push\n\nnpm run deploy\n\n*/\n\nReactDOM.render(\n  <Provider store = {store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}
{"version":3,"sources":["redux/user/user.selector.js","images/home-image.png","pages/home/home.jsx","redux/date/date.selector.js","redux/date/date.types.js","components/calendar/calendar.jsx","redux/date/date.actions.js","redux/tasks/tasks.types.js","redux/tasks/tasks.actions.js","components/taskPainel/taskPainel.jsx","redux/tasks/tasks.selector.js","components/taskUpdate/taskUpdate.component.jsx","components/painel/painel.jsx","components/taskPreview/taskPreview.jsx","pages/scheduler/scheduler.jsx","redux/user/user.type.js","redux/user/user.actions.js","components/userUpdateForm/userUpdateForm.jsx","pages/perfil/perfil.jsx","pages/dashboard/dashboard.jsx","components/signin/signin.jsx","components/signup/signup.jsx","pages/signin-signup/signin-signup.jsx","components/menu-side-bar/menu-side-bar.jsx","App.js","redux/date/date.reducer.js","redux/tasks/task.utils.js","redux/tasks/tasks.reducer.js","redux/user/user.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["selectUser","createSelector","state","user","userr","mapStateToProps","createStructuredSelector","connect","name","className","src","image","alt","width","height","selectSelectedDate","date","selectDate","DateActionTypes","dispatch","setSelectedDate","type","payload","useState","Date","value","setValue","toLocaleDateString","onChange","showFixedNumberOfWeeks","TaskActionTypes","getTaskToUpdate","task","removeTask","setStatusDowngrade","setStatusUpgrade","handleClick","taskInfo","method","endpoint","level","status","fetch","id","headers","body","JSON","stringify","title","description","catch","err","onClick","selectTask","selectTaskList","taskList","selectTaskUpdating","taskUpdating","setTaskById","dateTask","split","dateValue","setTitle","setDate","setDescription","required","placeholder","event","target","cols","rows","dateSplit","dateOriginal","taskUpdated","then","resp","json","Painel","props","newProps","this","setState","console","log","res","out","taskupdate","setTasks","map","Component","addTask","obj","SchedulerPage","UserActionTypes","addUser","updateUser","parentCallback","setName","email","setEmail","password","setPassword","getUser","deleteUser","isUpdate","setIsUpdate","DiagramsPage","SignIn","handleSubmit","a","preventDefault","undefined","alert","idLogado","nameLogado","emailLogado","passwordLogado","handleChange","onSubmit","React","SignUp","displayName","confirmPassword","SignInSignUpPage","menuCollapse","setMenuCollapse","collapsed","iconShape","active","icon","to","App","exact","path","component","HomePage","render","INITIAL_STATE","selectedDateReducer","action","addTaskToList","listOfTasks","taskToAdd","removeTaskToList","taskToRemove","filter","t","updateTask","taskReducer","userReducer","persistConfig","key","storage","rootReducer","combineReducers","persistReducer","middlewarers","logger","store","createStore","applyMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"yhBAIaA,EAAaC,YACtB,CAHY,SAAAC,GAAK,OAAIA,EAAMC,QAI3B,SAACC,GAAD,OAAWA,EAAMD,QCNN,MAA0B,uC,OCoBnCE,EAAkBC,YAAyB,CAC7CH,KAAOH,IAIIO,cAAQF,EAARE,EAhBE,SAAC,GAAD,IAAEJ,EAAF,EAAEA,KAAF,OACb,gCACI,gDAAiC,IAAbA,EAAKK,KAAa,mDAAmBL,EAAKK,QAC9D,sBAAKC,UAAU,iBAAf,UACI,oBAAIA,UAAU,YAAd,2+BACA,qBAAKC,IAAKC,EAAOC,IAAI,mBAAmBC,MAAM,MAAMC,OAAO,iB,uBCV1DC,G,YAAqBd,YAC9B,CAHe,SAAAC,GAAK,OAAIA,EAAMc,QAI9B,SAACA,GAAD,OAAUA,EAAKC,eCNNC,EACU,oBC2BvB,IAAMb,EAAkBC,YAAyB,CAC9CU,KAAOD,IAQKR,cAAQF,GALI,SAAAc,GAAQ,MAAK,CACtCC,gBAAiB,SAAAJ,GAAI,OAAIG,EC/BI,SAAAH,GAAI,MAAK,CACpCK,KAAMH,EACNI,QAASN,GD6BwBI,CAAgBJ,QAItCT,EA1Bf,YAAmD,EAAvBS,KAAwB,IAAlBI,EAAiB,EAAjBA,gBAElC,EAA0BG,mBAAS,IAAIC,MAAvC,mBAAOC,EAAP,KAAcC,EAAd,KAIA,OAFAN,EAAgBK,EAAME,sBAGhB,qBAAKlB,UAAU,WAAf,SACA,cAAC,IAAD,CACEmB,SAAUF,EACVD,MAAOA,EACPI,wBAAwB,S,gCEtBnBC,EACE,YADFA,EAEC,WAFDA,EAGG,cAHHA,EAIY,uBAJZA,EAKU,qBALVA,EAMK,cANLA,EAOY,qBCyBZC,EAAkB,SAACC,GAAD,MAAW,CACtCX,KAAMS,EACNR,QAASU,ICwDb,IAAM3B,EAAkBC,YAAyB,CAC/CH,KAAOH,IAcMO,cAAQF,GAXI,SAAAc,GAAQ,MAAK,CAEtCc,WAAY,SAAAD,GAAI,OAAIb,EDpFI,SAACa,GAAD,MAAW,CACjCX,KAAMS,EACNR,QAASU,GCkFkBC,CAAWD,KAExCE,mBAAoB,SAAAF,GAAI,OAAIb,EDjFI,SAACa,GAAD,MAAW,CACzCX,KAAMS,EACNR,QAASU,GC+E0BE,CAAmBF,KACxDG,iBAAkB,SAAAH,GAAI,OAAIb,ED7EI,SAACa,GAAD,MAAW,CACvCX,KAAMS,EACNR,QAASU,GC2EwBG,CAAiBH,KAEpDD,gBAAiB,SAAAC,GAAI,OAAIb,EAASY,EAAgBC,QAIrCzB,EA3Ff,YAAqG,IAAhFyB,EAA+E,EAA/EA,KAAM7B,EAAyE,EAAzEA,KAAM8B,EAAmE,EAAnEA,WAAYC,EAAuD,EAAvDA,mBAAoBC,EAAmC,EAAnCA,iBAAkBJ,EAAiB,EAAjBA,gBAEzEK,EAAc,SAACC,EAAUC,EAAQC,GAA0B,IAAhBC,EAAe,uDAAT,KAExC,MAATA,GACFL,EAAiBE,GACU,SAAnBA,EAASI,OAAqBJ,EAASI,OAAS,OAC5B,QAAnBJ,EAASI,SAAoBJ,EAASI,OAAS,UAEzC,QAATD,IACNN,EAAmBG,GACQ,SAAnBA,EAASI,OAAoBJ,EAASI,OAAS,OAC3B,QAAnBJ,EAASI,SAAmBJ,EAASI,OAAS,UAGzDC,MAAM,wDAAD,OAAyDvC,EAAKwC,GAA9D,YAAoEJ,EAApE,YAAgFF,EAASM,IAC3F,CACCL,OAAQA,EACRM,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBJ,GAAKN,EAASM,GACdK,MAAQX,EAASW,MACjBC,YAAcZ,EAASY,YACvBR,OAASJ,EAASI,OAClBzB,KAAOqB,EAASrB,SAGlBkC,OAAM,SAAAC,GAAS,MAAOA,MAM5B,OACA,sBAAK1C,UAAU,cAAf,UAEe,SAAfuB,EAAKS,OAEL,sBAAKhC,UAAY,YAAjB,UAEA,cAAC,IAAD,CAAaA,UAAU,cACvB2C,QAAS,WAAOhB,EAAYJ,EAAM,MAAO,gBAAiB,WAE1D,cAAC,IAAD,CAASvB,UAAU,YACnB2C,QAAS,WAAOhB,EAAYJ,EAAM,MAAO,gBAAiB,YAGzC,QAAfA,EAAKS,OACP,qBAAKhC,UAAY,kBAAjB,SACA,cAAC,IAAD,CAASA,UAAU,YACnB2C,QAAS,WAAOhB,EAAYJ,EAAM,MAAO,gBAAiB,WAG1D,qBAAKvB,UAAY,YAAjB,SAEA,cAAC,IAAD,CAAaA,UAAU,cACvB2C,QAAS,WAAOhB,EAAYJ,EAAM,MAAO,gBAAiB,aAIzD,+BAAKA,EAAKgB,MAAV,QACA,4BAAIhB,EAAKiB,cACT,sBAAKxC,UAAY,YAAjB,UAEA,cAAC,IAAD,CAAkBA,UAAU,cAC5B2C,QAAS,WAAOhB,EAAYJ,EAAM,SAAU,eAAgBC,EAAWD,MAEvE,cAAC,IAAD,CACCvB,UAAU,cAAc2C,QAAS,WAAOrB,EAAgBC,eChFxDqB,G,MAAa,SAAAnD,GAAK,OAAIA,EAAM8B,OAErBsB,EAAiBrD,YAC1B,CAACoD,IACD,SAACrB,GAAD,OAAUA,EAAKuB,YAGNC,EAAqBvD,YAC9B,CAACoD,IACD,SAACrB,GAAD,OAAUA,EAAKyB,gB,MCiGjB,IAAMpD,EAAkBC,YAAyB,CAC/CH,KAAOH,EACPgC,KAAOwB,IAQIjD,cAAQF,GALM,SAAAc,GAAQ,MAAK,CACtCuC,YAAa,SAAA1B,GAAI,OAAIb,EHvFE,SAACa,GAAD,MAAW,CAClCX,KAAMS,EACNR,QAASU,GGqFqB0B,CAAY1B,KAC1CD,gBAAmB,SAAAC,GAAI,OAAIb,EAASY,EAAgBC,QAGzCzB,EA3Gf,YAAiE,IAA3CyB,EAA0C,EAA1CA,KAAM0B,EAAoC,EAApCA,YAAa3B,EAAuB,EAAvBA,gBAAiB5B,EAAM,EAANA,KAElDwD,EAAW3B,EAAKhB,KAAK4C,MAAM,KAC3BC,EAAYF,EAAS,GAAK,IAAMA,EAAS,GAAK,IAAMA,EAAS,GAEnE,EAA0BpC,mBAASS,EAAKgB,OAAxC,mBAAOA,EAAP,KAAcc,EAAd,KACA,EAAwBvC,mBAASsC,GAAjC,mBAAO7C,EAAP,KAAa+C,EAAb,KACA,EAAsCxC,mBAASS,EAAKiB,aAApD,mBAAOA,EAAP,KAAoBe,EAApB,KAoCA,OAEA,sBAAKvD,UAAU,cAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,+CAEF,uBAAMA,UAAU,YAAhB,UACE,uBACEY,KAAK,OACLb,KAAK,QACLmC,GAAG,aACHlB,MAAOuB,EACPiB,UAAQ,EACRC,YAAY,QACZtC,SAAU,SAAAuC,GAAK,OAAIL,EAASK,EAAMC,OAAO3C,UAE3C,0BACEjB,KAAK,cACLmC,GAAG,cACHuB,YAAY,cACZzC,MAAOwB,EACPgB,UAAQ,EACRI,KAAK,KACLC,KAAK,KACL1C,SAAU,SAAAuC,GAAK,OAAIH,EAAeG,EAAMC,OAAO3C,UAEjD,qBAAKhB,UAAU,YAAf,SACA,uBACIwD,UAAQ,EACR5C,KAAK,OACLI,MAAOT,EACPR,KAAK,OACLmC,GAAG,OACHf,SAAU,SAAAuC,GAAK,OAAIJ,EAAQI,EAAMC,OAAO3C,YAE5C,sBAAKhB,UAAU,qBAAf,UAEA,wBAAQY,KAAK,SAASZ,UAAU,WAC5B2C,QAAS,YAxEG,WAElB,IAAMmB,EAAYvD,EAAK4C,MAAM,KACvBY,EAAeD,EAAU,GAAK,IAAMA,EAAU,GAAK,IAAMA,EAAU,GAEnEE,EAAc,CAClB9B,GAAKX,EAAKW,GACVK,MAAQA,GAAShB,EAAKgB,MAAQA,EAAQhB,EAAKgB,MAC3ChC,KAAQwD,GAAgBxC,EAAKhB,KAAOwD,EAAexC,EAAKhB,KACxDiC,YAAcA,GAAejB,EAAKiB,YAAcA,EAAcjB,EAAKiB,YACnER,OAAST,EAAKS,QAGhBiB,EAAYe,GACZ1C,EAAgB,MAEhBW,MAAM,wDAAD,OAAyDvC,EAAKwC,GAA9D,0BAAkF8B,EAAY9B,IACnG,CACCL,OAAQ,MACRM,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBJ,GAAK8B,EAAY9B,GACjBK,MAAQyB,EAAYzB,MACpBC,YAAcwB,EAAYxB,YAC1BR,OAASgC,EAAYhC,OACrBzB,KAAOyD,EAAYzD,SAGrB0D,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClB1B,OAAM,SAAAC,GAAS,MAAOA,KA2CDf,IADpB,yBAKC,wBAAQf,KAAK,SAASZ,UAAU,aAC7B2C,QAAS,WAAOrB,EAAgB,OADnC,gCClFD8C,E,kDACN,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACD5E,MAAQ,CACT8B,KAAO,IAHG,E,oEAQlB,SAAiC+C,GAC7BC,KAAKC,SAAU,CAAEjD,KAAO+C,EAAS/C,S,+BAIrC,WAAoB,IAAD,OACfkD,QAAQC,IAAI,mCAEZzC,MAAM,wDAAD,OAAyDsC,KAAKF,MAAM3E,KAAKwC,GAAzE,UACL,CAAEL,OAAQ,QACToC,MAAM,SAAAU,GAAG,OAAIA,EAAIR,UACjBF,MAAM,SAAAW,GACH,EAAKJ,SAAS,CAACjD,KAAOqD,OAEzBnC,OAAM,SAAAC,GAAS,MAAOA,O,oBAM3B,WAEI+B,QAAQC,IAAI,wBACZ,IAAMnE,EAAQgE,KAAKF,MAAM9D,KACnBgB,EAAQgD,KAAK9E,MAAM8B,KACnBsD,EAAcN,KAAKF,MAAMQ,WAM/B,OAJAN,KAAKF,MAAMS,SAASvD,GAEpBkD,QAAQC,IAAInD,GAIZ,sBAAKvB,UAAU,SAAf,UACA,yCAAYO,KACG,MAAdsE,EAAqB,cAAC,EAAD,IACtB,sBAAK7E,UAAU,cAAf,UAEI,sBAAKA,UAAU,gBAAf,UACI,mBAAGA,UAAU,OAAb,kBACA,qBAAKA,UAAU,sBAAf,SACKuB,EAAKwD,KAAI,SAAAxD,GAAI,MAAoB,QAAfA,EAAKS,QAAoBT,EAAKhB,MAAQA,EAAO,cAAC,EAAD,CAA0BgB,KAAQA,GAAjBA,EAAKW,IAAsB,WAIpH,sBAAKlC,UAAU,gBAAf,UACI,mBAAGA,UAAU,OAAb,mBACA,qBAAKA,UAAU,sBAAf,SACKuB,EAAKwD,KAAI,SAAAxD,GAAI,MAAoB,SAAfA,EAAKS,QAAqBT,EAAKhB,MAAQA,EAAO,cAAC,EAAD,CAA0BgB,KAAQA,GAAjBA,EAAKW,IAAsB,WAIrH,sBAAKlC,UAAU,gBAAf,UACI,mBAAGA,UAAU,OAAb,kBACA,qBAAKA,UAAU,sBAAf,SACKuB,EAAKwD,KAAI,SAAAxD,GAAI,MAAoB,QAAfA,EAAKS,QAAoBT,EAAKhB,MAAQA,EAAO,cAAC,EAAD,CAA0BgB,KAAQA,GAAjBA,EAAKW,IAAsB,qB,GAhEvG8C,aA2EfpF,EAAkBC,YAAyB,CAC7CH,KAAOH,EACPgB,KAAOD,EACPiB,KAAOsB,EACPgC,WAAa9B,IASDjD,cAAQF,GANG,SAAAc,GAAQ,MAAK,CACpCoE,SAAU,SAAAvD,GAAI,OAAIb,EJ/FE,SAACa,GAAD,MAAW,CAC/BX,KAAMS,EACNR,QAASU,GI6FkBuD,CAASvD,QAKxBzB,CAA6CsE,G,MCb3D,IAAMxE,EAAkBC,YAAyB,CAC/CH,KAAOH,IAOIO,cAAQF,GAJM,SAAAc,GAAQ,MAAK,CACtCuE,QAAS,SAAA1D,GAAI,OAAIb,ELvFE,SAACa,GAAD,MAAW,CAC9BX,KAAMS,EACNR,QAASU,GKqFiB0D,CAAQ1D,QAGvBzB,EAxFf,YAAuC,IAAhBmF,EAAe,EAAfA,QAASvF,EAAM,EAANA,KAE9B,EAAwBoB,mBAAS,IAAjC,mBAAOP,EAAP,KAAa+C,EAAb,KACA,EAA0BxC,mBAAS,IAAnC,mBAAOyB,EAAP,KAAcc,EAAd,KACA,EAAsCvC,mBAAS,IAA/C,mBAAO0B,EAAP,KAAoBe,EAApB,KAEA,EAAgCzC,mBAAS,IAAzC,mBAiCA,OAjCA,UAkCA,sBAAKd,UAAU,eAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,wCAEF,uBAAMA,UAAU,YAAhB,UACE,uBACEY,KAAK,OACLb,KAAK,QACLmC,GAAG,aACHsB,UAAQ,EACRC,YAAY,QACZtC,SAAU,SAAAuC,GAAK,OAAIL,EAASK,EAAMC,OAAO3C,UAE3C,0BACEjB,KAAK,cACLmC,GAAG,cACHuB,YAAY,cACZD,UAAQ,EACRI,KAAK,KACLC,KAAK,KACL1C,SAAU,SAAAuC,GAAK,OAAIH,EAAeG,EAAMC,OAAO3C,UAGjD,qBAAKhB,UAAU,YAAf,SACA,uBACIwD,UAAQ,EACR5C,KAAK,OACLb,KAAK,OACLmC,GAAG,OACHf,SAAU,SAAAuC,GAAK,OAAIJ,EAAQI,EAAMC,OAAO3C,YAI5C,wBAAQJ,KAAK,SAASZ,UAAU,WAC5B2C,QAAS,YAlEG,WAElB,IAAMmB,EAAYvD,EAAK4C,MAAM,KACvBY,EAAeD,EAAU,GAAK,IAAMA,EAAU,GAAK,IAAMA,EAAU,GAEnEvC,EAAO,CACXgB,MAAQA,EACRC,YAAcA,EACdjC,KAAQwD,EACR/B,OAAS,QAGXC,MAAM,sEAAD,OAAuEvC,EAAKwC,IAC9E,CACCL,OAAQ,OACRM,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAQhB,EAAKgB,MACbC,YAAcjB,EAAKiB,YACnBR,OAAST,EAAKS,OACdzB,KAAOgB,EAAKhB,SAGd0D,MAAM,SAAAU,GAAG,OAAIA,EAAIR,UACjBF,MAAM,SAAAiB,GAAG,OAAID,EAAQC,MACrBzC,OAAM,SAAAC,GAAS,MAAOA,KAsCJf,IADpB,oCC5DSwD,EAdO,SAAC,GAAW,EAAV5D,KAGpB,OACA,sBAAKvB,UAAU,YAAf,UACA,sBAAKA,UAAU,gBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEJ,cAAC,EAAD,CAAQA,UAAU,e,OCjBToF,G,YACC,YADDA,EAEI,cAFJA,EAGI,cCDJC,GAAU,SAAC3F,GAAD,MACnB,CACIkB,KAAMwE,EACNvE,QAASnB,ICgFjB,IAIgBI,eAAQ,MAJG,SAAAY,GAAQ,MAAK,CACpC4E,WAAa,SAAA5F,GAAI,OAAIgB,EDtEC,SAAChB,GAAD,MACtB,CACIkB,KAAMwE,EACNvE,QAASnB,GCmEiB4F,CAAW5F,QAG7BI,EAjFhB,YAA6D,IAApCJ,EAAmC,EAAnCA,KAAM6F,EAA6B,EAA7BA,eAAiBD,EAAY,EAAZA,WAE9Cb,QAAQC,IAAIhF,EAAKwC,IACf,MAAwBpB,mBAASpB,EAAKK,MAAtC,mBAAOA,EAAP,KAAayF,EAAb,KACA,EAA0B1E,mBAASpB,EAAK+F,OAAxC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAAgC5E,mBAASpB,EAAKiG,UAA9C,mBAAOA,EAAP,KAAiBC,EAAjB,KAgCJ,OAEI,sBAAK5F,UAAU,qBAAf,UACI,iCACA,6CAEA,uBACAA,UAAU,QACVgB,MAAOjB,EACPyD,UAAQ,EACR5C,KAAK,OACL6C,YAAY,OACZtC,SAAU,SAAAuC,GAAK,OAAI8B,EAAQ9B,EAAMC,OAAO3C,UAExC,uBACAhB,UAAU,QACVgB,MAAOyE,EACPjC,UAAQ,EACR5C,KAAK,QACL6C,YAAY,QACZtC,SAAU,SAAAuC,GAAK,OAAIgC,EAAShC,EAAMC,OAAO3C,UAEzC,uBACAhB,UAAU,QACVgB,MAAO2E,EACPnC,UAAQ,EACR5C,KAAK,WACL6C,YAAY,WACZtC,SAAU,SAAAuC,GAAK,OAAIkC,EAAYlC,EAAMC,OAAO3C,UAE5C,0BAEA,sBAAKhB,UAAU,wBAAf,UACA,wBAASA,UAAU,sBAAsBY,KAAK,SAAS+B,QAAS,YA9DlD,WAElB,IAAMkD,EAAW,CACb3D,GAAKxC,EAAKwC,GACVnC,KAAMA,EACN0F,MAAOA,EACPE,SAAUA,GAGdlB,QAAQC,IAAImB,GAEZ5D,MAAM,yEAAD,OAA0EvC,EAAKwC,IACpF,CACCL,OAAQ,MACRM,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBvC,KAAO8F,EAAQ9F,KACf0F,MAAQI,EAAQJ,MAChBE,SAAWE,EAAQF,aAGrB1B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,KAAKqB,EAAWO,IAChBpD,OAAM,SAAAC,GAAS,MAAOA,KAuCoDf,GAAe4D,GAAe,IAArG,oBACA,wBAASvF,UAAU,uBAAuB2C,QAAS,WAAO4C,GAAe,IAAzE,6BC/BR,IAAM3F,GAAkBC,YAAyB,CAC7CH,KAAOH,IASKO,eAAQF,IANG,SAAAc,GAAQ,MAAK,CACpCoF,WAAa,SAAApG,GAAI,OAAIgB,EF5CC,SAAChB,GAAD,MACtB,CACIkB,KAAMwE,EACNvE,QAASnB,GEyCiBoG,CAAWpG,QAK7BI,EA/ChB,YAAwC,IAAnBJ,EAAkB,EAAlBA,KAAMoG,EAAY,EAAZA,WAEvB,EAAgChF,oBAAS,GAAzC,mBAAOiF,EAAP,KAAiBC,EAAjB,KAiBJ,OAEI,qBAAKhG,UAAU,cAAf,SACK+F,EAAW,cAAC,GAAD,yBAAgBrG,KAAMA,GAAUsG,GAAhC,IAA6CT,eAAgBS,KACxE,gCACD,yCACA,wCAAWtG,EAAKK,QAChB,yCAAYL,EAAK+F,SACjB,sBAAKzF,UAAU,sBAAf,UACI,wBAASA,UAAU,sBAAsB2C,QAAS,WAAOqD,GAAY,IAArE,mBACA,wBAAShG,UAAU,uBAAuB2C,QAAS,WAvB3DV,MAAM,uEAAD,OAAwEvC,EAAKwC,IAClF,CACCL,OAAQ,SACRM,QAAS,CAAC,eAAgB,sBAE1BM,OAAM,SAAAC,GAAS,MAAOA,KAGvBoD,EAAWpG,IAeH,+BC/BGuG,I,MANM,kBACjB,8BACI,mD,8CCEFC,I,wDACF,WAAY7B,GAAO,IAAD,8BACd,cAAMA,IAaV8B,aAdkB,yCAcH,WAAMzC,GAAN,oBAAA0C,EAAA,sDAEX1C,EAAM2C,iBAFK,EAKe,EAAK5G,MAAxBgG,EALI,EAKJA,MAAOE,EALH,EAKGA,SAEd1D,MAAM,6DACN,CACCJ,OAAQ,OACRM,QAAS,CACN,8BAA+B,IAC/B,eAAgB,oBAEnBC,KAAMC,KAAKC,UAAU,CAClBvC,KAAiB,GACjB0F,MAAiBA,EACjBE,SAAiBA,MAGrB1B,MAAM,SAAAU,GAAG,OAAKA,EAAIR,UAClBF,MAAM,SAAAiB,GAAG,MAAkB,IAAbA,EAAInF,WAA2BuG,GAAZpB,EAAInF,KAAqBwG,MAAM,kCAAoC,EAAK/B,SAAS,CAAEgC,SAAUtB,EAAIhD,GAAIuE,WAAavB,EAAInF,KAAO2G,YAAcxB,EAAIO,MAAOkB,eAAiBzB,EAAIS,cAC5MlD,OAAM,SAAAC,GAAS6D,MAAM,UAAY7D,MAtBtB,2CAdG,wDAuClBkE,aAAe,SAAAlD,GAEX,MAAsBA,EAAMC,OAArB3C,EAAP,EAAOA,MAAOjB,EAAd,EAAcA,KAEd,EAAKyE,SAAL,gBAAgBzE,EAAOiB,KAxCvB,EAAKvB,MAAQ,CACTgG,MAAM,GACNE,SAAS,GAETa,SAAU,GACVC,WAAa,GACbC,YAAc,GACdC,eAAmB,IAVT,E,0CA+ClB,WAGI,OAFApC,KAAKF,MAAMgB,QAAQ,CAACnD,GAAIqC,KAAK9E,MAAM+G,SAAUzG,KAAMwE,KAAK9E,MAAMgH,WAAYhB,MAAQlB,KAAK9E,MAAMiH,YAAaf,SAAWpB,KAAK9E,MAAMkH,iBAGhI,sBAAK3G,UAAU,UAAf,UACQ,oBAAIA,UAAU,QAAd,sCACA,wEAEA,uBAAMA,UAAU,OAAO6G,SAAUtC,KAAK4B,aAAtC,UACI,sBAAKnG,UAAU,SAAf,UACI,uBAAOA,UAAU,QAAjB,qBACA,uBACAA,UAAU,QACVD,KAAK,QACLa,KAAK,QACLO,SAAUoD,KAAKqC,aACfpD,UAAQ,OAEZ,sBAAKxD,UAAU,SAAf,UACI,uBAAOA,UAAU,QAAjB,wBACA,uBACAA,UAAU,QACVD,KAAK,WACLa,KAAK,WACLO,SAAUoD,KAAKqC,aACfpD,UAAQ,OAGZ,qBAAKxD,UAAU,UAAf,SACI,wBAAQA,UAAU,gBAAgBY,KAAK,SAAvC,kC,GA7EHkG,IAAM9B,YAyFZlF,eAAQ,MAJI,SAAAY,GAAQ,MAAK,CACpC2E,QAAS,SAAA3F,GAAI,OAAIgB,EAAS2E,GAAQ3F,QAGvBI,CAAkCoG,ICxF3Ca,I,wDACF,WAAY1C,GAAO,IAAD,8BACd,cAAMA,IAeV8B,aAhBkB,yCAgBH,WAAMzC,GAAN,gBAAA0C,EAAA,yDACX1C,EAAM2C,iBAEA3G,EAAO,CACTsH,YAAc,EAAKvH,MAAMuH,YACzBvB,MAAQ,EAAKhG,MAAMgG,MACnBE,SAAW,EAAKlG,MAAMkG,SACtBsB,gBAAkB,EAAKxH,MAAMwH,iBAGjC,EAAKzC,SAAS,CACVwC,YAAa,GACbvB,MAAO,GACPE,SAAU,GACVsB,gBAAiB,KAGjBvH,EAAKiG,UAAYjG,EAAKuH,gBAjBf,uBAkBPxC,QAAQC,IAAKhF,EAAKiG,SAAW,QAAUjG,EAAKuH,iBAC5CV,MAAM,yBAnBC,0BAuBXtE,MAAM,oEACN,CACCJ,OAAQ,OACRM,QAAS,CACN,8BAA+B,IAC/B,eAAgB,oBAEnBC,KAAMC,KAAKC,UAAU,CAClBvC,KAAcL,EAAKsH,YACnBvB,MAAc/F,EAAK+F,MACnBE,SAAcjG,EAAKiG,aAItB1B,MAAM,SAAAU,GAAG,OAAIA,EAAIR,UACjBF,MAAM,SAAAiB,GAAG,OAAI,EAAKV,SAAS,CAAEgC,SAAUtB,EAAIhD,GAAKuE,WAAavB,EAAInF,KAAO2G,YAAcxB,EAAIO,MAAOkB,eAAiBzB,EAAIS,cACtHlD,OAAM,SAAAC,GAAS6D,MAAM,UAAY7D,MAvCvB,4CAhBG,wDA4DlBkE,aAAe,SAAAlD,GAEX,MAAwBA,EAAMC,OAAtB5D,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MACd,EAAKwD,SAAL,gBAAgBzE,EAAOiB,KA5DvB,EAAKvB,MAAQ,CACTuH,YAAkB,GAClBvB,MAAkB,GAClBE,SAAkB,GAClBsB,gBAAkB,GAElBT,SAAU,GACVC,WAAkB,GAClBC,YAAkB,GAClBC,eAAmB,IAZT,E,0CAmElB,WAGI,OAFApC,KAAKF,MAAMgB,QAAQ,CAACnD,GAAIqC,KAAK9E,MAAM+G,SAAUzG,KAAMwE,KAAK9E,MAAMgH,WAAYhB,MAAQlB,KAAK9E,MAAMiH,YAAcf,SAAWpB,KAAK9E,MAAMkH,iBAG7H,sBAAK3G,UAAU,UAAf,UACI,oBAAIA,UAAU,QAAd,qCACA,wEAEA,uBAAMA,UAAU,OAAO6G,SAAUtC,KAAK4B,aAAtC,UACA,sBAAKnG,UAAU,SAAf,UACQ,uBAAOA,UAAU,QAAjB,oBACA,uBACAA,UAAU,QACVD,KAAK,cACLa,KAAK,OACLO,SAAUoD,KAAKqC,aACfpD,UAAQ,OAEZ,sBAAKxD,UAAU,SAAf,UACI,uBAAOA,UAAU,QAAjB,qBACA,uBACAA,UAAU,QACVD,KAAK,QACLa,KAAK,QACLO,SAAUoD,KAAKqC,aACfpD,UAAQ,OAEZ,sBAAKxD,UAAU,SAAf,UACI,uBAAOA,UAAU,QAAjB,wBACA,uBACAA,UAAU,QACVD,KAAK,WACLa,KAAK,WACLO,SAAUoD,KAAKqC,aACfpD,UAAQ,OAEZ,sBAAKxD,UAAU,SAAf,UACI,uBAAOA,UAAU,QAAjB,gCACA,uBACAA,UAAU,QACVD,KAAK,kBACLa,KAAK,WACLO,SAAUoD,KAAKqC,aACfpD,UAAQ,OAEZ,qBAAKxD,UAAU,UAAf,SACI,wBAAQA,UAAU,gBAAgBY,KAAK,SAC7B+B,QAAS4B,KAAK5C,YADxB,kC,GAlHHmF,IAAM9B,YAgIZlF,eAAQ,MAJI,SAAAY,GAAQ,MAAK,CACpC2E,QAAS,SAAA3F,GAAI,OAAIgB,EAAS2E,GAAQ3F,QAGvBI,CAAkCiH,IC3HlCG,GAPU,kBACrB,sBAAKlH,UAAU,sBAAf,UACI,cAAC,GAAD,IACA,cAAC,GAAD,Q,gDC+ER,IAAMJ,GAAkBC,YAAyB,CAC/CH,KAAOH,IAQMO,eAAQF,IAJI,SAAAc,GAAQ,MAAK,CACtC2E,QAAS,SAAA3F,GAAI,OAAIgB,EAAS2E,GAAQ3F,QAGrBI,EAtEf,YAAuC,IAAjBJ,EAAgB,EAAhBA,KAAM2F,EAAU,EAAVA,QAE1B,EAAwCvE,oBAAS,GAAjD,mBAAOqG,EAAP,KAAqBC,EAArB,KAeA,OATA3C,QAAQC,IAAI,aAAgBhF,EAAKK,MAW3B,qBAAKC,UAAU,OAAf,SACA,eAAC,KAAD,CACAqH,UAAaF,EADb,UAEE,eAAC,KAAD,WACA,qBAAKnH,UAAU,WAAf,SAEI,6BAAKmH,EAAe,oCAAa,8BAAI,cAAC,KAAD,CAAoBnH,UAAU,aAAlC,oBAEnC,qBAAKA,UAAU,YAAY2C,QAvBf,WACLyE,GAAfD,IAsBQ,SAEGA,EACC,cAAC,KAAD,CAAoBnH,UAAU,eAE9B,cAAC,KAAD,CAAoBA,UAAU,oBAIpC,cAAC,KAAD,UACE,eAAC,KAAD,CAAMsH,UAAU,SAAhB,UACE,eAAC,KAAD,CAAUC,QAAQ,EAAMC,KAAM,cAAC,KAAD,IAAYxH,UAAU,YAApD,iBAAoE,cAAC,IAAD,CAAMyH,GAAG,SAC7E,eAAC,KAAD,CAAUD,KAAM,cAAC,KAAD,IAAYxH,UAAU,YAAtC,uBAA4D,cAAC,IAAD,CAAMyH,GAAG,kBACrE,eAAC,KAAD,CAAUD,KAAM,cAAC,KAAD,IAAgBxH,UAAU,YAA1C,gBAAyD,cAAC,IAAD,CAAMyH,GAAG,eAClE,eAAC,KAAD,CAAUD,KAAM,cAAC,IAAD,IAAkBxH,UAAU,YAA5C,6BAAwE,cAAC,IAAD,CAAMyH,GAAG,uBAKrF,cAAC,KAAD,UACE,cAAC,KAAD,CAAMH,UAAU,SAAhB,SACgB,IAAb5H,EAAKK,MAA4B,IAAdL,EAAK+F,MACtB,eAAC,KAAD,CAAU+B,KAAM,cAAC,IAAD,IAAuBxH,UAAU,YAAjD,gCAAgF,cAAC,IAAD,CAAMyH,GAAG,sBACzF,cAAC,KAAD,CAAUD,KAAM,cAAC,KAAD,IAAaxH,UAAU,YAAY2C,QAAS,WAvCvE0C,EAAQ,CACNtF,KAAM,GACN0F,MAAO,MAqCE,gCC3DXiC,G,4JAEJ,WAAS,IAAD,OAER,OAEE,qBAAK1H,UAAU,MAAf,SACA,eAAC,IAAD,WACE,cAAC,GAAD,CAAaA,UAAU,SAEvB,qBAAKA,UAAU,UAAf,SACA,eAAC,IAAD,WAEA,cAAC,IAAD,CAAO2H,OAAK,EAACC,KAAK,IAAIC,UAAWC,IAEjC,cAAC,IAAD,CAAOF,KAAK,UAAUG,OAAS,iBAA8B,IAAxB,EAAK1D,MAAM3E,KAAKK,KAClD,cAAC,IAAD,CAAU0H,GAAG,MACb,cAAC,GAAD,OAGH,cAAC,IAAD,CAAOG,KAAK,aAAaG,OAAS,iBAA8B,IAAxB,EAAK1D,MAAM3E,KAAKK,KAC/C,cAAC,IAAD,CAAU0H,GAAG,MACb,cAAC,EAAD,OAGT,cAAC,IAAD,CAAOG,KAAK,aAAaG,OAAS,iBAA8B,IAAxB,EAAK1D,MAAM3E,KAAKK,KAC/C,cAAC,IAAD,CAAU0H,GAAG,MACb,cAAC,GAAD,OAGT,cAAC,IAAD,CAAOG,KAAK,iBAAiBG,OAAS,iBAA8B,IAAxB,EAAK1D,MAAM3E,KAAKK,KACnD,cAAC,IAAD,CAAU0H,GAAG,MACb,cAAC,GAAD,qB,GAhCGzC,aA6CZpF,GAAkBC,YAAyB,CAC/CH,KAAOH,IAGMO,eAAQF,GAARE,CAAyB4H,I,0DC/DlCM,GAAe,CACjBxH,WAAY,MAgBDyH,GAba,WAAqC,IAApCxI,EAAmC,uDAA1BuI,GAAeE,EAAW,uCAE5D,OAAQA,EAAOtH,MACX,KAAKH,EACD,OAAO,2BACAhB,GADP,IAEIe,WAAY0H,EAAOrH,UAEvB,QACI,OAAOpB,I,SCjBV0I,GAAgB,SAACC,EAAaC,GACvC,MAAM,GAAN,oBAAWD,GAAX,gBAA4BC,MAGnBC,GAAmB,SAACF,EAAaG,GAC1C,OAAOH,EAAYI,QAAO,SAAAC,GAAC,OAAIA,EAAEvG,IAAMqG,EAAarG,OAG3CT,GAAqB,SAAC2G,EAAa7G,GAC5C,OAAO6G,EAAYrD,KAAI,SAAA0D,GAAC,OAEnBA,EAAEvG,IAAMX,EAAKW,IAAkB,SAAZuG,EAAEzG,OAAtB,YAAC,eAEMyG,GAFP,IAGIzG,OAAS,SAGVyG,EAAEvG,IAAMX,EAAKW,IAAkB,QAAZuG,EAAEzG,OAAtB,YAAC,eAEIyG,GAFL,IAGEzG,OAAS,UAGXyG,MAIG/G,GAAmB,SAAC0G,EAAa7G,GAE1C,OAAO6G,EAAYrD,KAAI,SAAA0D,GAAC,OAEnBA,EAAEvG,IAAMX,EAAKW,IAAkB,SAAZuG,EAAEzG,OAAtB,YAAC,eAEMyG,GAFP,IAGIzG,OAAS,SAGVyG,EAAEvG,IAAMX,EAAKW,IAAkB,QAAZuG,EAAEzG,OAAtB,YAAC,eAEIyG,GAFL,IAGEzG,OAAS,UAGXyG,MAMGC,GAAa,SAACN,EAAa7G,GAEpC,OAAO6G,EAAYrD,KAAI,SAAA0D,GAAC,OAEnBA,EAAEvG,IAAMX,EAAKW,GACd,CACIA,GAAIX,EAAKW,GACTK,MAAQhB,EAAKgB,MACbC,YAAcjB,EAAKiB,YACnBjC,KAAQgB,EAAKhB,KACbyB,OAAST,EAAKS,QAGhByG,MC3DJT,GAAe,CACjBlF,SAAU,GAEVE,aAAe,MAgDJ2F,GA7CK,WAAqC,IAApClJ,EAAmC,uDAA1BuI,GAAeE,EAAW,uCAEpD,OAAQA,EAAOtH,MACX,KAAKS,EACD,OAAO,2BACA5B,GADP,IAEIqD,SAAUoF,EAAOrH,UAEzB,KAAKQ,EACD,OAAO,2BACA5B,GADP,IAEIqD,SAAUqF,GAAc1I,EAAMqD,SAAUoF,EAAOrH,WAEvD,KAAKQ,EACD,OAAO,2BACA5B,GADP,IAEIqD,SAAUwF,GAAiB7I,EAAMqD,SAAUoF,EAAOrH,WAE1D,KAAKQ,EACD,OAAO,2BACA5B,GADP,IAEIqD,SAAUrB,GAAmBhC,EAAMqD,SAAUoF,EAAOrH,WAE5D,KAAKQ,EACD,OAAO,2BACA5B,GADP,IAEIqD,SAAUpB,GAAiBjC,EAAMqD,SAAUoF,EAAOrH,WAE1D,KAAKQ,EACD,OAAO,2BACA5B,GADP,IAEIqD,SAAW4F,GAAWjJ,EAAMqD,SAAUoF,EAAOrH,WAGrD,KAAKQ,EACD,OAAO,2BACA5B,GADP,IAEIuD,aAAckF,EAAOrH,UAGzB,QACI,OAAOpB,IChDjBuI,GAAe,CACjBtI,KAAM,CACFwC,GAAI,GACJnC,KAAM,GACN0F,MAAO,GACPE,SAAS,KA6CFiD,GAzBK,WAAqC,IAApCnJ,EAAmC,uDAA1BuI,GAAeE,EAAW,uCAEpD,OAAQA,EAAOtH,MACX,KAAKwE,EACD,OAAO,2BACA3F,GADP,IAEIC,KAAMwI,EAAOrH,UAErB,KAAKuE,EACD,OAAO,2BACA3F,GADP,IAEIC,KAAMsI,GAActI,OAG5B,KAAK0F,EACD,OAAO,2BACA3F,GADP,IAEIC,KAAMwI,EAAOrH,UAGjB,QACI,OAAOpB,ICtCjBoJ,GAAgB,CAClBC,IAAK,OACLC,cAGIC,GAAcC,aAAgB,CAChC1I,KAAO0H,GACP1G,KAAOoH,GACPjJ,KAAOkJ,KAIEM,gBAAeL,GAAeG,ICdvCG,GAAe,CAACC,MAETC,GAAQC,aAAYN,GAAaO,KAAe,WAAf,EAAmBJ,KCUjEK,IAASzB,OACP,cAAC,IAAD,CAAUsB,MAASA,GAAnB,SACE,cAAC,IAAMI,WAAP,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.17d3c9e9.chunk.js","sourcesContent":["import {createSelector} from 'reselect'\r\n\r\nconst theUser = state => state.user\r\n\r\nexport const selectUser = createSelector(\r\n    [theUser],\r\n    (userr) => userr.user\r\n)","export default __webpack_public_path__ + \"static/media/home-image.c4c3465a.png\";","import React from 'react';\r\nimport './home.scss'\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {createStructuredSelector} from 'reselect'\r\nimport image from '../../images/home-image.png';\r\n\r\nconst HomePage = ({user}) => (\r\n    <div>\r\n        <h1>Bem vindo(a)  { user.name == \"\" ? <>Cadastre-se</> : user.name }</h1>\r\n        <div className=\"conteiner-home\">\r\n            <h3 className=\"text-home\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Congue eu consequat ac felis donec et odio pellentesque. Eu volutpat odio facilisis mauris sit amet massa vitae. At urna condimentum mattis pellentesque id nibh tortor id aliquet. Sed libero enim sed faucibus. Hendrerit dolor magna eget est lorem ipsum. Nec dui nunc mattis enim ut. Adipiscing vitae proin sagittis nisl rhoncus mattis rhoncus. Vel quam elementum pulvinar etiam. Fermentum odio eu feugiat pretium nibh ipsum consequat nisl vel. Duis convallis convallis tellus id interdum velit laoreet id. Cursus turpis massa tincidunt dui ut ornare lectus. Suspendisse interdum consectetur libero id faucibus nisl tincidunt. Neque volutpat ac tincidunt vitae semper quis lectus nulla at. Id diam maecenas ultricies mi eget mauris pharetra et ultrices. In pellentesque massa placerat duis ultricies. Non tellus orci ac auctor augue mauris. Nec dui nunc mattis enim.</h3>\r\n            <img src={image} alt=\"Girl in a jacket\" width=\"500\" height=\"300\"></img>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user : selectUser\r\n    })\r\n\r\n  \r\nexport default connect(mapStateToProps)(HomePage)\r\n//export default HomePage","import {createSelector} from 'reselect'\r\n\r\nconst selectDate = state => state.date\r\n\r\nexport const selectSelectedDate = createSelector(\r\n    [selectDate],\r\n    (date) => date.selectDate\r\n)","export const DateActionTypes = {\r\n    SET_SELECTED_DATE: 'SET_SELECTED_DATE'\r\n}","import React, { useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport './calendar.scss'\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {selectSelectedDate} from '../../redux/date/date.selector'\r\nimport {createStructuredSelector} from 'reselect'\r\nimport { setSelectedDate } from '../../redux/date/date.actions';\r\n\r\n\r\nfunction CalendarComponent({date, setSelectedDate}){\r\n  \r\nconst [value, setValue] = useState(new Date())\r\n\r\nsetSelectedDate(value.toLocaleDateString())\r\n  \r\nreturn(\r\n      <div className='calendar'>\r\n      <Calendar\r\n        onChange={setValue}\r\n        value={value}\r\n        showFixedNumberOfWeeks={true}\r\n      />\r\n      </div>\r\n)\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   date : selectSelectedDate\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setSelectedDate: date => dispatch( setSelectedDate(date) )\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarComponent)\r\n","import {DateActionTypes} from './date.types'\r\n\r\nexport const setSelectedDate = date => ({\r\n    type: DateActionTypes.SET_SELECTED_DATE,\r\n    payload: date\r\n})","export const TaskActionTypes = {\r\n    SET_TASKS: 'SET_TASKS',\r\n    ADD_TASK: 'ADD_TASK',\r\n    REMOVE_TASK:'REMOVE_TASK',\r\n    SET_STATUS_DOWNGRADE:'SET_STATUS_DOWNGRADE',\r\n    SET_STATUS_UPGRADE:'SET_STATUS_UPGRADE',\r\n    UPDATE_TASK : 'UPDATE_TASK',\r\n    GET_TASK_TO_UPDATE : 'GET_TASK_TO_UPDATE'\r\n}","import {TaskActionTypes} from './tasks.types'\r\n\r\nexport const setTasks = (task) => ({\r\n    type: TaskActionTypes.SET_TASKS,\r\n    payload: task\r\n})\r\n\r\nexport const addTask = (task) => ({\r\n    type: TaskActionTypes.ADD_TASK,\r\n    payload: task\r\n})\r\n\r\nexport const removeTask = (task) => ({\r\n    type: TaskActionTypes.REMOVE_TASK,\r\n    payload: task\r\n})\r\n\r\nexport const setStatusDowngrade = (task) => ({\r\n    type: TaskActionTypes.SET_STATUS_DOWNGRADE,\r\n    payload: task\r\n})\r\n\r\nexport const setStatusUpgrade = (task) => ({\r\n    type: TaskActionTypes.SET_STATUS_UPGRADE,\r\n    payload: task\r\n})\r\n\r\nexport const setTaskById = (task) => ({\r\n    type: TaskActionTypes.UPDATE_TASK,\r\n    payload: task\r\n})\r\n\r\nexport const getTaskToUpdate = (task) => ({\r\n    type: TaskActionTypes.GET_TASK_TO_UPDATE,\r\n    payload: task\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './taskPainel.scss'\r\nimport { BiEditAlt } from \"react-icons/bi\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { HiCheck } from \"react-icons/hi\";\r\nimport { RiReplyLine } from \"react-icons/ri\";\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { removeTask, setStatusDowngrade, setStatusUpgrade, getTaskToUpdate } from '../../redux/tasks/tasks.actions';\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\n\r\nfunction TaskPainel({task, user, removeTask, setStatusDowngrade, setStatusUpgrade, getTaskToUpdate}){\r\n\r\n    const handleClick = (taskInfo, method, endpoint, level=null) => {\r\n\r\n      if (level == 'up') {\r\n        setStatusUpgrade(taskInfo)\r\n        if     (taskInfo.status == 'DOING') { taskInfo.status = 'DONE' }\r\n        else if (taskInfo.status == 'TODO') { taskInfo.status = 'DOING'}\r\n      }\r\n     else if (level == 'down'){\r\n        setStatusDowngrade(taskInfo)\r\n        if     (taskInfo.status == 'DOING'){ taskInfo.status = 'TODO' }\r\n        else if (taskInfo.status == 'DONE'){ taskInfo.status = 'DOING'}\r\n      }\r\n\r\n      fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/${user.id}/${endpoint}/${taskInfo.id}`,\r\n         { \r\n          method: method ,\r\n          headers: {\"Content-type\": \"application/json\"},\r\n          body: JSON.stringify({\r\n            id : taskInfo.id,\r\n            title : taskInfo.title,\r\n            description : taskInfo.description,\r\n            status : taskInfo.status,\r\n            date : taskInfo.date\r\n          })\r\n        })\r\n         .catch(err => { throw  err })\r\n\r\n      }\r\n      \r\n\r\n\r\n    return (\r\n    <div className='task-painel'>\r\n    {\r\n    task.status == \"DOING\"\r\n     ? \r\n    <div className = 'icons-sup'>\r\n\r\n    <RiReplyLine className='undone icon' \r\n    onClick={() => {handleClick(task, 'PUT', 'atualizartask', 'down')}}/> \r\n\r\n    <HiCheck className='done icon'\r\n    onClick={() => {handleClick(task, 'PUT', 'atualizartask', 'up')}} />\r\n    \r\n    </div>\r\n    : task.status == \"TODO\" ?\r\n    <div className = 'icons-sup-right'>\r\n    <HiCheck className='done icon'\r\n    onClick={() => {handleClick(task, 'PUT', 'atualizartask', 'up')}} />\r\n    </div>\r\n    :\r\n    <div className = 'icons-sup'>\r\n\r\n    <RiReplyLine className='undone icon' \r\n    onClick={() => {handleClick(task, 'PUT', 'atualizartask', 'down')}}/> \r\n    </div>\r\n    }\r\n\r\n     <h2>{task.title}  </h2>\r\n     <p>{task.description}</p>\r\n     <div className = 'icons-inf'>\r\n\r\n     <RiDeleteBin5Line className='delete icon' \r\n     onClick={() => {handleClick(task, 'DELETE', 'removertask'); removeTask(task)}} />\r\n\r\n     <BiEditAlt\r\n      className='update icon' onClick={() => {getTaskToUpdate(task)}} /> \r\n\r\n     </div>\r\n    </div>\r\n    )}\r\n\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  user : selectUser,\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n  removeTask: task => dispatch(removeTask(task)) ,\r\n\r\n  setStatusDowngrade: task => dispatch(setStatusDowngrade(task)) ,\r\n  setStatusUpgrade: task => dispatch(setStatusUpgrade(task)) ,\r\n\r\n  getTaskToUpdate: task => dispatch(getTaskToUpdate(task)) \r\n\r\n  })\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskPainel)","import {createSelector} from 'reselect'\r\n\r\nconst selectTask = state => state.task\r\n\r\nexport const selectTaskList = createSelector(\r\n    [selectTask],\r\n    (task) => task.taskList\r\n)\r\n\r\nexport const selectTaskUpdating = createSelector(\r\n    [selectTask],\r\n    (task) => task.taskUpdating\r\n)","import React, { useState } from \"react\";\r\nimport \"./taskUpdate.styles.scss\";\r\n\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { setTaskById, getTaskToUpdate } from '../../redux/tasks/tasks.actions';\r\nimport { selectUser } from '../../redux/user/user.selector'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { selectTaskUpdating } from \"../../redux/tasks/tasks.selector\";\r\n\r\nfunction TaskUpdate ({task, setTaskById, getTaskToUpdate, user}){\r\n  \r\n  const dateTask = task.date.split('/')\r\n  const dateValue = dateTask[2] + '-' + dateTask[1] + '-' + dateTask[0]\r\n\r\n  const [title, setTitle] = useState(task.title)\r\n  const [date, setDate] = useState(dateValue)\r\n  const [description, setDescription] = useState(task.description)\r\n\r\n  const handleClick = () => {\r\n\r\n    const dateSplit = date.split('-')\r\n    const dateOriginal = dateSplit[2] + '/' + dateSplit[1] + '/' + dateSplit[0]\r\n\r\n    const taskUpdated = {\r\n      id : task.id,\r\n      title : title != task.title ? title : task.title,\r\n      date :  dateOriginal != task.date ? dateOriginal : task.date,\r\n      description : description != task.description ? description : task.description,\r\n      status : task.status\r\n    }\r\n\r\n    setTaskById(taskUpdated)\r\n    getTaskToUpdate(null)\r\n\r\n    fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/${user.id}/atualizartask/${taskUpdated.id}`,\r\n    { \r\n     method: \"PUT\" ,\r\n     headers: {\"Content-type\": \"application/json\"},\r\n     body: JSON.stringify({\r\n       id : taskUpdated.id,\r\n       title : taskUpdated.title,\r\n       description : taskUpdated.description,\r\n       status : taskUpdated.status,\r\n       date : taskUpdated.date\r\n     })\r\n   })\r\n    .then(resp => resp.json() )\r\n    .catch(err => { throw  err })\r\n\r\n  }\r\n\r\n\r\n  return(\r\n    \r\n  <div className=\"task-update\">\r\n    <div className=\"create-task-title\">\r\n      <h2>Update Task</h2>\r\n    </div>\r\n    <form className=\"task-form\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"title\"\r\n        id=\"form-title\"\r\n        value={title}\r\n        required\r\n        placeholder=\"Title\"\r\n        onChange={event => setTitle(event.target.value)}      />\r\n\r\n      <textarea\r\n        name=\"description\"\r\n        id=\"description\"\r\n        placeholder=\"Description\"\r\n        value={description}\r\n        required\r\n        cols=\"30\"\r\n        rows=\"10\"\r\n        onChange={event => setDescription(event.target.value)}      />\r\n        \r\n      <div className=\"form-date\">\r\n      <input  \r\n          required \r\n          type=\"date\" \r\n          value={date}\r\n          name=\"date\" \r\n          id=\"date\" \r\n          onChange={event => setDate(event.target.value)}       />\r\n      </div>\r\n      <div className='buttons-update-div'>\r\n        \r\n      <button type=\"button\" className=\"btn send\"\r\n          onClick={() => {handleClick()}} >\r\n            Update task\r\n      </button>\r\n       \r\n       <button type=\"button\" className=\"btn cancel\"\r\n          onClick={() => {getTaskToUpdate(null)}} >\r\n            Cancel\r\n      </button>\r\n\r\n        </div>\r\n    </form>\r\n  </div>\r\n\r\n\r\n  )}\r\n\r\n  const mapStateToProps = createStructuredSelector({\r\n    user : selectUser,\r\n    task : selectTaskUpdating\r\n    })\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    setTaskById: task => dispatch(setTaskById(task))  ,\r\n    getTaskToUpdate  : task => dispatch(getTaskToUpdate(task))  \r\n    })\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskUpdate)\r\n","import React, { Component } from 'react';\r\nimport TaskPainel from '../taskPainel/taskPainel';\r\nimport './painel.scss'\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {selectSelectedDate} from '../../redux/date/date.selector'\r\nimport {selectTaskList, selectTaskUpdating} from '../../redux/tasks/tasks.selector'\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {setTasks} from '../../redux/tasks/tasks.actions'\r\nimport {createStructuredSelector} from 'reselect'\r\nimport TaskUpdate from '../taskUpdate/taskUpdate.component'\r\n\r\n\r\nclass Painel extends Component{\r\nconstructor(props){\r\n    super(props)\r\n    this.state = {\r\n        task : [],\r\n    \r\n    }\r\n}\r\n\r\nUNSAFE_componentWillReceiveProps(newProps){\r\n    this.setState( { task : newProps.task} )\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n    console.log(\"ENTROU componentDidMount PAINEL\")\r\n\r\n    fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/${this.props.user.id}/tasks`, \r\n    { method: 'GET' })\r\n    .then (res => res.json() )\r\n    .then (out => {\r\n        this.setState({task : out})\r\n    })\r\n    .catch(err => { throw  err })\r\n   \r\n}\r\n\r\n\r\n\r\nrender(){\r\n\r\n    console.log(\"ENTROU RENDER PAINEL\")\r\n    const date  = this.props.date;\r\n    const task  = this.state.task;\r\n    const taskupdate  = this.props.taskupdate;\r\n\r\n    this.props.setTasks(task)\r\n\r\n    console.log(task)\r\n\r\n    return (\r\n    \r\n    <div className='painel'>\r\n    <h1> Date  {date}</h1>\r\n    {taskupdate != null ? <TaskUpdate />  : \r\n    <div className='painel-main'>\r\n    \r\n        <div className='painel-colunm'>\r\n            <p className='type'>TODO</p>\r\n            <div className='painel-colunm-tasks'>\r\n                {task.map(task => (task.status == \"TODO\" && task.date == date ? <TaskPainel key={task.id} task = {task}/> : ''))}\r\n            </div>\r\n        </div>\r\n\r\n        <div className='painel-colunm'>\r\n            <p className='type'>DOING</p>\r\n            <div className='painel-colunm-tasks'>\r\n                {task.map(task => (task.status == \"DOING\" && task.date == date ? <TaskPainel key={task.id} task = {task}/> : ''))}\r\n            </div>\r\n        </div>\r\n\r\n        <div className='painel-colunm'>\r\n            <p className='type'>DONE</p>\r\n            <div className='painel-colunm-tasks'>\r\n                {task.map(task => (task.status == \"DONE\" && task.date == date ? <TaskPainel key={task.id} task = {task}/> : ''))}\r\n            </div>\r\n        </div>\r\n    \r\n    </div>\r\n}\r\n    </div>\r\n    )\r\n}\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user : selectUser,\r\n    date : selectSelectedDate, \r\n    task : selectTaskList,\r\n    taskupdate : selectTaskUpdating\r\n    })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setTasks: task => dispatch(setTasks(task)) \r\n  })\r\n\r\n  \r\n\r\n export default connect(mapStateToProps, mapDispatchToProps)(Painel)\r\n\r\n","import React, { useState } from \"react\";\r\nimport \"./taskPreview.scss\";\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { addTask } from '../../redux/tasks/tasks.actions';\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\nfunction TaskPreview ({addTask, user}){\r\n\r\n  const [date, setDate] = useState('')\r\n  const [title, setTitle] = useState('')\r\n  const [description, setDescription] = useState('')\r\n\r\n  const [response, setResponse] = useState('')\r\n\r\n  const handleClick = () => {\r\n\r\n    const dateSplit = date.split('-')\r\n    const dateOriginal = dateSplit[2] + '/' + dateSplit[1] + '/' + dateSplit[0]\r\n\r\n    const task = {\r\n      title : title,\r\n      description : description,\r\n      date :  dateOriginal,\r\n      status : 'TODO'\r\n    }\r\n\r\n    fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/adicionartask/${user.id}`,\r\n       { \r\n        method: 'POST' ,\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n          \"Content-type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          title : task.title,\r\n          description : task.description,\r\n          status : task.status,\r\n          date : task.date\r\n        })\r\n      })\r\n       .then( res => res.json())\r\n       .then( obj => addTask(obj))\r\n       .catch(err => { throw  err })\r\n    }\r\n\r\n  return(\r\n  <div className=\"task-preview\">\r\n    <div className=\"create-task-title\">\r\n      <h2>Task</h2>\r\n    </div>\r\n    <form className=\"task-form\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"title\"\r\n        id=\"form-title\"\r\n        required\r\n        placeholder=\"Title\"\r\n        onChange={event => setTitle(event.target.value)}      />\r\n\r\n      <textarea\r\n        name=\"description\"\r\n        id=\"description\"\r\n        placeholder=\"Description\"\r\n        required\r\n        cols=\"30\"\r\n        rows=\"10\"\r\n        onChange={event => setDescription(event.target.value)}      >\r\n        </textarea>\r\n        \r\n      <div className=\"form-date\">\r\n      <input  \r\n          required \r\n          type=\"date\" \r\n          name=\"date\" \r\n          id=\"date\" \r\n          onChange={event => setDate(event.target.value)}\r\n      />\r\n      </div>\r\n      \r\n      <button type=\"button\" className=\"btn-send\"\r\n          onClick={() => {handleClick()}} \r\n          >Add to Painel</button>\r\n    </form>\r\n  </div>\r\n  )}\r\n\r\n  const mapStateToProps = createStructuredSelector({\r\n    user : selectUser,\r\n    })\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    addTask: task => dispatch(addTask(task)) ,\r\n    })\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskPreview)\r\n\r\n","import React, { Component } from 'react';\r\nimport './scheduler.scss'\r\n\r\nimport CalendarComponent from '../../components/calendar/calendar';\r\nimport Painel from '../../components/painel/painel';\r\nimport TaskPreview from '../../components/taskPreview/taskPreview'\r\n\r\n\r\nconst SchedulerPage = ({task}) => {\r\n\r\n\r\n    return (\r\n    <div className='scheduler'>\r\n    <div className='calendar-task'>\r\n        <CalendarComponent />\r\n        <TaskPreview />\r\n    </div>\r\n    <Painel className='painel'/>\r\n    </div>\r\n    )\r\n    }\r\n    \r\nexport default SchedulerPage\r\n\r\n","export const UserActionTypes = {\r\n    ADD_USER: 'ADD_USER',\r\n    DELETE_USER: 'DELETE_USER',\r\n    UPDATE_USER: 'UPDATE_USER'\r\n}","import {UserActionTypes} from './user.type'\r\n\r\nexport const addUser = (user) => (\r\n    {\r\n        type: UserActionTypes.ADD_USER,\r\n        payload: user\r\n    }\r\n)\r\n\r\nexport const deleteUser = (user) => (\r\n    {\r\n        type: UserActionTypes.DELETE_USER,\r\n        payload: user\r\n    }\r\n)\r\n\r\nexport const updateUser = (user) => (\r\n    {\r\n        type: UserActionTypes.UPDATE_USER,\r\n        payload: user\r\n    }\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './userUpdateForm.scss'\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {updateUser} from '../../redux/user/user.actions'\r\n\r\n\r\nfunction UserUpdateForm({user, parentCallback , updateUser}){\r\n\r\n  console.log(user.id)\r\n    const [name, setName] = useState(user.name)\r\n    const [email, setEmail] = useState(user.email)\r\n    const [password, setPassword] = useState(user.password)\r\n\r\n\r\n  const handleClick = () => {\r\n\r\n    const getUser = ({\r\n        id : user.id,\r\n        name: name,\r\n        email: email,\r\n        password: password\r\n    })\r\n\r\n    console.log(getUser)\r\n\r\n    fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/atualizarusuario/${user.id}`,\r\n    { \r\n     method: 'PUT' ,\r\n     headers: {\"Content-type\": \"application/json\"},\r\n     body: JSON.stringify({\r\n       name : getUser.name,\r\n       email : getUser.email,\r\n       password : getUser.password\r\n     })\r\n   })\r\n    .then(resp => resp.json() )\r\n    .then(updateUser(getUser))\r\n    .catch(err => { throw  err })\r\n  \r\n\r\n  }\r\n\r\n\r\nreturn(\r\n\r\n    <div className='perfil-update-form'>\r\n        <form>\r\n        <h1>Update User</h1>\r\n\r\n        <input \r\n        className='input' \r\n        value={name}\r\n        required\r\n        type='text' \r\n        placeholder='Name'\r\n        onChange={event => setName(event.target.value)} />\r\n\r\n        <input \r\n        className='input' \r\n        value={email}\r\n        required\r\n        type='email' \r\n        placeholder='Email'\r\n        onChange={event => setEmail(event.target.value)} />\r\n        \r\n        <input \r\n        className='input' \r\n        value={password}\r\n        required\r\n        type='password' \r\n        placeholder='Password'\r\n        onChange={event => setPassword(event.target.value)} />\r\n\r\n        <hr/>\r\n        </form>\r\n        <div className='perfil-update-buttons'>\r\n        <button  className='custom-button edite' type='submit' onClick={() => {handleClick(); parentCallback(false);}} >Submit</button>\r\n        <button  className='custom-button cancel' onClick={() => {parentCallback(false) }} >Cancel</button>\r\n        </div>\r\n    </div>\r\n)\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateUser : user => dispatch(updateUser(user))  \r\n    })\r\n\r\n export default connect(null, mapDispatchToProps)(UserUpdateForm)\r\n","import React, {useState} from 'react';\r\nimport './perfil.scss'\r\nimport UserUpdateForm from '../../components/userUpdateForm/userUpdateForm'\r\n\r\n//redux\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport {connect} from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect'\r\nimport {deleteUser} from '../../redux/user/user.actions'\r\n\r\n\r\nfunction PerfilPage({user, deleteUser}){\r\n\r\n    const [isUpdate, setIsUpdate] = useState(false)\r\n\r\n    const handleClick = () => {\r\n\r\n    fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/deletarusuario/${user.id}`,\r\n    { \r\n     method: 'DELETE' ,\r\n     headers: {\"Content-type\": \"application/json\"}\r\n   })\r\n    .catch(err => { throw  err })\r\n\r\n\r\n    deleteUser(user)\r\n\r\n  }\r\n\r\n\r\nreturn(\r\n\r\n    <div className='perfil-page'>\r\n        {isUpdate ? <UserUpdateForm user={user} {...setIsUpdate} parentCallback={setIsUpdate}/> : \r\n         <div>\r\n        <h1>My Info</h1>\r\n        <h2>Name: {user.name}</h2>\r\n        <h2>Email: {user.email}</h2>\r\n        <div className='perfil-page-buttons'>\r\n            <button  className='custom-button edite' onClick={() => {setIsUpdate(true)}} >Edite</button>\r\n            <button  className='custom-button remove' onClick={() => {handleClick()}} >Remove</button>\r\n        </div>\r\n        </div>\r\n}\r\n    </div>\r\n)\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user : selectUser,\r\n    })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    deleteUser : user => dispatch(deleteUser(user))  \r\n    })\r\n        \r\n  \r\n\r\n export default connect(mapStateToProps, mapDispatchToProps)(PerfilPage)\r\n\r\n","import React from 'react';\r\nimport './dashboard.scss'\r\n\r\nconst DiagramsPage = () => (\r\n    <div>\r\n        <h1>Dashboard !!!</h1>\r\n    </div>\r\n);\r\n\r\nexport default DiagramsPage","import React from 'react';\r\nimport './signin.scss'\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { addUser } from '../../redux/user/user.actions';\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            email:'',\r\n            password:'',\r\n\r\n            idLogado: '',\r\n            nameLogado : '' , \r\n            emailLogado : '',\r\n            passwordLogado   : ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = async event => {\r\n        // Quando o usuário apertar em \"SIGN IN\", virá para cá\r\n        event.preventDefault()\r\n\r\n        // o this state está com os valores digitas por conta do handleChange\r\n        const {email, password} = this.state\r\n\r\n        fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/login`,\r\n        { \r\n         method: 'POST' ,\r\n         headers: {\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Content-type\": \"application/json\"\r\n        },\r\n         body: JSON.stringify({\r\n            name     :       '',\r\n            email    :       email,\r\n            password :       password\r\n         })\r\n       })\r\n       .then( res =>  res.json())\r\n       .then( obj => (obj.name  == '' || obj.name == undefined) ? alert(\" Email ou senha incorretos !! \") : this.setState({ idLogado: obj.id ,nameLogado : obj.name , emailLogado : obj.email, passwordLogado : obj.password}))\r\n       .catch(err => { alert(\"Error: \" + err); })\r\n    }\r\n\r\n    handleChange = event => {\r\n        // Toda vez que o input for alterado, o state receberá o valor\r\n        const {value, name} = event.target\r\n        \r\n        this.setState({[name]: value })\r\n    }\r\n\r\n\r\n    render(){\r\n        this.props.addUser({id: this.state.idLogado, name: this.state.nameLogado, email : this.state.emailLogado, password : this.state.passwordLogado})\r\n\r\n        return(\r\n        <div className='sign-in'>\r\n                <h2 className='title'>I already have a account</h2>\r\n                <span> Sign in with you email and password</span>\r\n\r\n                <form className='form' onSubmit={this.handleSubmit}>\r\n                    <div className='celula'>\r\n                        <label className='label'>Email: </label>\r\n                        <input \r\n                        className='input'\r\n                        name='email' \r\n                        type='email' \r\n                        onChange={this.handleChange} \r\n                        required/>\r\n                    </div>\r\n                    <div className='celula'>\r\n                        <label className='label'>Password: </label>  \r\n                        <input\r\n                        className='input'\r\n                        name='password' \r\n                        type='password' \r\n                        onChange={this.handleChange}\r\n                        required/>\r\n                    </div>\r\n\r\n                    <div className='buttons'>\r\n                        <button className='custom-button' type='submit'>SIGN IN </button>\r\n                    </div> \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addUser: user => dispatch(addUser(user)) \r\n    })\r\n    \r\nexport default connect(null, mapDispatchToProps)(SignIn)\r\n\r\n","import React from 'react';\r\nimport './signup.scss'\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { addUser } from '../../redux/user/user.actions';\r\n\r\n\r\nclass SignUp extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.state = {\r\n            displayName     : '',\r\n            email           : '',\r\n            password        : '',\r\n            confirmPassword : '',\r\n\r\n            idLogado: '',\r\n            nameLogado      : '',\r\n            emailLogado     : '',\r\n            passwordLogado   : ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n \r\n        const user = {\r\n            displayName : this.state.displayName,\r\n            email : this.state.email,\r\n            password : this.state.password,\r\n            confirmPassword : this.state.confirmPassword\r\n        }\r\n\r\n        this.setState({\r\n            displayName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n          });\r\n\r\n        if (user.password != user.confirmPassword) {\r\n            console.log( user.password + \" --- \" + user.confirmPassword)\r\n            alert(\"passwords don't match\");\r\n            return;\r\n          }else{\r\n\r\n        fetch(`https://gps-back-spring-ifeito.herokuapp.com/usuario/criarusuario`,\r\n        { \r\n         method: 'POST' ,\r\n         headers: {\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Content-type\": \"application/json\"\r\n        },\r\n         body: JSON.stringify({\r\n            name :        user.displayName,\r\n            email :       user.email,\r\n            password :    user.password\r\n         })\r\n\r\n       })\r\n        .then( res => res.json())\r\n        .then( obj => this.setState({ idLogado: obj.id , nameLogado : obj.name , emailLogado : obj.email, passwordLogado : obj.password}))\r\n        .catch(err => { alert(\"Error: \" + err); })\r\n\r\n    }\r\n      };\r\n\r\n    handleChange = event => {\r\n       // Toda vez que o input for alterado, o state receberá o valor\r\n        const { name, value } = event.target\r\n        this.setState({[name]: value})\r\n    }\r\n\r\n\r\n    render(){\r\n        this.props.addUser({id: this.state.idLogado, name: this.state.nameLogado, email : this.state.emailLogado,  password : this.state.passwordLogado})\r\n\r\n        return(\r\n            <div className='sign-up'>\r\n                <h2 className='title'>I do not have a account</h2>\r\n                <span>Sign up with your email and password</span>\r\n                \r\n                <form className='form' onSubmit={this.handleSubmit}>\r\n                <div className='celula'>\r\n                        <label className='label'>Name: </label>\r\n                        <input \r\n                        className='input'\r\n                        name='displayName' \r\n                        type='text' \r\n                        onChange={this.handleChange} \r\n                        required/>\r\n                    </div>\r\n                    <div className='celula'>\r\n                        <label className='label'>Email: </label>\r\n                        <input \r\n                        className='input'\r\n                        name='email' \r\n                        type='email' \r\n                        onChange={this.handleChange} \r\n                        required/>\r\n                    </div>\r\n                    <div className='celula'>\r\n                        <label className='label'>Password: </label>  \r\n                        <input\r\n                        className='input'\r\n                        name='password' \r\n                        type='password' \r\n                        onChange={this.handleChange}\r\n                        required/>\r\n                    </div>\r\n                    <div className='celula'>\r\n                        <label className='label'>Confirm Password: </label>\r\n                        <input \r\n                        className='input'\r\n                        name='confirmPassword' \r\n                        type='password' \r\n                        onChange={this.handleChange} \r\n                        required/>\r\n                    </div>\r\n                    <div className='buttons'>\r\n                        <button className='custom-button' type='submit'\r\n                                  onClick={this.handleClick}\r\n                                  >SIGN UP </button>\r\n                    </div> \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addUser: user => dispatch(addUser(user)) \r\n    })\r\n    \r\nexport default connect(null, mapDispatchToProps)(SignUp)\r\n","import React from 'react';\r\nimport './signin-signup.scss'\r\n\r\nimport SignIn from '../../components/signin/signin';\r\nimport SignUp from '../../components/signup/signup';\r\n\r\nconst SignInSignUpPage = () => (\r\n    <div className='sign-in-and-sign-up'>\r\n        <SignIn />\r\n        <SignUp />\r\n    </div>\r\n);\r\n\r\nexport default SignInSignUpPage","import {\r\n  ProSidebar,\r\n  Menu,\r\n  MenuItem,\r\n  SidebarHeader,\r\n  SidebarFooter,\r\n  SidebarContent,\r\n} from \"react-pro-sidebar\";\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport React, { useState } from 'react';\r\n\r\nimport { FaList, FaRegHeart } from \"react-icons/fa\";\r\nimport { FiHome, FiLogOut, FiArrowLeftCircle, FiArrowRightCircle } from \"react-icons/fi\";\r\nimport { RiPencilLine } from \"react-icons/ri\";\r\nimport { BiArrowToRight } from \"react-icons/bi\";\r\nimport { BsFillBarChartFill } from \"react-icons/bs\";\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport  './menu-side-bar.scss'\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {selectUser} from '../../redux/user/user.selector'\r\nimport { addUser } from '../../redux/user/user.actions';\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\nfunction MenuSideBar({user, addUser}) {\r\n\r\n  const [menuCollapse, setMenuCollapse] = useState(false);\r\n\r\n  const menuIconClick = () => {\r\n    menuCollapse ? setMenuCollapse(false) : setMenuCollapse(true);\r\n  };\r\n\r\n  console.log(\"USUARIO : \" +  user.name)\r\n\r\n  function logOut(){\r\n      addUser({\r\n        name: '',\r\n        email: ''\r\n    })\r\n  }\r\n\r\n  return(\r\n\r\n        <div className='menu'>\r\n        <ProSidebar \r\n        collapsed = {menuCollapse} >\r\n          <SidebarHeader >\r\n          <div className=\"logotext\" >\r\n          \r\n              <h1>{menuCollapse ? <p>GPS</p> : <p ><BsFillBarChartFill className='big-icon'/>  Planner </p>}</h1>\r\n            </div>\r\n            <div className=\"closemenu\" onClick={menuIconClick}>\r\n\r\n              {menuCollapse ? (\r\n                <FiArrowRightCircle className='arrow-icon'/>\r\n              ) : (\r\n                <FiArrowLeftCircle  className='arrow-icon'/>\r\n              )}\r\n            </div>\r\n          </SidebarHeader>\r\n          <SidebarContent >\r\n            <Menu iconShape=\"square\">\r\n              <MenuItem active={true} icon={<FiHome />} className='menu-item'>Home<Link to=\"/\" /></MenuItem>\r\n              <MenuItem icon={<FaList />} className='menu-item'>Dashboards<Link to=\"/dashboard\" /></MenuItem>\r\n              <MenuItem icon={<FaRegHeart />} className='menu-item'>You<Link to=\"/perfil\" /></MenuItem>\r\n              <MenuItem icon={<RiPencilLine />} className='menu-item'>Calendar Planner<Link to=\"/scheduler\" /></MenuItem>\r\n            </Menu>\r\n          </SidebarContent>\r\n\r\n          {/* AQUI SÓ VAI FUNCIONAR MESMO QUANDO O USUARIO ESTIVER FUNCIONANDO NO BACK E FRONT */}\r\n          <SidebarFooter >\r\n            <Menu iconShape=\"square\">\r\n              {user.name == '' && user.email == ''\r\n              ?  <MenuItem icon={<BiArrowToRight   />}  className='menu-item'>Sign In or Sign Up <Link to=\"/signin-signup\" /></MenuItem>\r\n              :  <MenuItem icon={<FiLogOut/>} className='menu-item' onClick={() => logOut()}>Logout</MenuItem>   \r\n              }\r\n              \r\n            </Menu>\r\n          </SidebarFooter>\r\n        </ProSidebar>\r\n        </div>\r\n\r\n  )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  user : selectUser\r\n  })\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addUser: user => dispatch(addUser(user)) \r\n  })\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuSideBar)\r\n//export default MenuSideBar","import './App.css';\nimport React, { Component } from 'react';\n\nimport { Switch, Route, Redirect, BrowserRouter as Router} from 'react-router-dom';\n\nimport HomePage from './pages/home/home';\nimport SchedulerPage from './pages/scheduler/scheduler';\nimport PerfilPage from './pages/perfil/perfil';\nimport DiagramsPage from './pages/dashboard/dashboard'\nimport SignInSignUpPage from './pages/signin-signup/signin-signup';\n\nimport MenuSideBar from './components/menu-side-bar/menu-side-bar'\n\n//redux\nimport { connect } from 'react-redux';\nimport {selectUser} from './redux/user/user.selector'\nimport {createStructuredSelector} from 'reselect'\n\nclass App extends Component {\n\n  render(){\n\n  return (\n\n    <div className='App'>\n    <Router>\n      <MenuSideBar className='menu'/>\n\n      <div className='content'>\n      <Switch >\n      \n      <Route exact path='/' component={HomePage} />\n\n      <Route path='/perfil' render={ () => this.props.user.name == '' ? \n        (<Redirect to='/'/>) :\n        (<PerfilPage />)\n      } />\n\n      <Route path='/scheduler' render={ () => this.props.user.name == '' ? \n              (<Redirect to='/'/>) :\n              (<SchedulerPage />)\n            } />\n\n      <Route path='/dashboard' render={ () => this.props.user.name == '' ? \n              (<Redirect to='/'/>) :\n              (<DiagramsPage />)\n            } />\n\n      <Route path='/signin-signup' render={ () => this.props.user.name != '' ? \n              (<Redirect to='/'/>) :\n              (<SignInSignUpPage />)\n      } />\n      \n      </Switch>\n      </div>\n\n    </Router>\n    </div>\n  );\n  }\n}\n\n\nconst mapStateToProps = createStructuredSelector({\n  user : selectUser\n  })\n\nexport default connect(mapStateToProps)(App);\n","  \r\nimport {DateActionTypes} from './date.types'\r\n\r\n\r\nconst INITIAL_STATE ={\r\n    selectDate: null\r\n}\r\n\r\nconst selectedDateReducer = (state =  INITIAL_STATE, action) => {\r\n\r\n    switch (action.type){\r\n        case DateActionTypes.SET_SELECTED_DATE:\r\n            return {\r\n                ...state,\r\n                selectDate: action.payload\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\nexport default selectedDateReducer","export const addTaskToList = (listOfTasks, taskToAdd) => {\r\n    return [...listOfTasks, {...taskToAdd}]\r\n}\r\n\r\nexport const removeTaskToList = (listOfTasks, taskToRemove) => {  \r\n    return listOfTasks.filter(t => t.id != taskToRemove.id)\r\n};\r\n\r\nexport const setStatusDowngrade = (listOfTasks, task) => {\r\n    return listOfTasks.map(t => \r\n\r\n        (t.id == task.id && t.status == 'DOING') ?\r\n        {\r\n            ...t, \r\n            status : 'TODO'\r\n        }\r\n\r\n        : (t.id == task.id && t.status == 'DONE') ?\r\n        {\r\n            ...t, \r\n            status : 'DOING'\r\n        } \r\n\r\n        : t\r\n    )\r\n};\r\n\r\nexport const setStatusUpgrade = (listOfTasks, task) => {\r\n    \r\n    return listOfTasks.map(t => \r\n\r\n        (t.id == task.id && t.status == 'DOING') ?\r\n        {\r\n            ...t, \r\n            status : 'DONE'\r\n        }\r\n\r\n        : (t.id == task.id && t.status == 'TODO') ?\r\n        {\r\n            ...t, \r\n            status : 'DOING'\r\n        } \r\n\r\n        : t\r\n\r\n    )\r\n}\r\n\r\n\r\nexport const updateTask = (listOfTasks, task) => {\r\n    \r\n    return listOfTasks.map(t => \r\n\r\n        (t.id == task.id) ?\r\n        {\r\n            id: task.id,\r\n            title : task.title,\r\n            description : task.description,\r\n            date :  task.date,\r\n            status : task.status\r\n        }\r\n\r\n        : t\r\n\r\n    )\r\n}\r\n","import {TaskActionTypes} from './tasks.types'\r\nimport {addTaskToList, updateTask,  removeTaskToList, setStatusDowngrade, setStatusUpgrade} from './task.utils'\r\n\r\nconst INITIAL_STATE ={\r\n    taskList: [],\r\n\r\n    taskUpdating : null\r\n}\r\n\r\nconst taskReducer = (state =  INITIAL_STATE, action) => {\r\n\r\n    switch (action.type){\r\n        case TaskActionTypes.SET_TASKS:\r\n            return {\r\n                ...state,\r\n                taskList: action.payload\r\n            }\r\n        case TaskActionTypes.ADD_TASK:\r\n            return {\r\n                ...state,\r\n                taskList: addTaskToList(state.taskList, action.payload)\r\n            }\r\n        case TaskActionTypes.REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                taskList: removeTaskToList(state.taskList, action.payload)\r\n            }\r\n        case TaskActionTypes.SET_STATUS_DOWNGRADE:\r\n            return {\r\n                ...state,\r\n                taskList: setStatusDowngrade(state.taskList, action.payload)\r\n            }\r\n        case TaskActionTypes.SET_STATUS_UPGRADE:\r\n            return {\r\n                ...state,\r\n                taskList: setStatusUpgrade(state.taskList, action.payload)\r\n            }\r\n        case TaskActionTypes.UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                taskList:  updateTask(state.taskList, action.payload)\r\n                }\r\n\r\n        case TaskActionTypes.GET_TASK_TO_UPDATE:\r\n            return {\r\n                ...state,\r\n                taskUpdating: action.payload\r\n                }\r\n\r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\nexport default taskReducer","import {UserActionTypes} from './user.type'\r\n\r\nconst INITIAL_STATE ={\r\n    user: {\r\n        id: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        password:\"\"\r\n    }\r\n    /* Para testes:\r\n\r\n        user: {\r\n        id: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        password:\"\"\r\n    }\r\n\r\n        user: {\r\n        id: 1,\r\n        name: \"ana\",\r\n        email: \"ana.o.lins@gmail.com\",\r\n        password:\"123\"\r\n    }\r\n     */\r\n}\r\n\r\nconst userReducer = (state =  INITIAL_STATE, action) => {\r\n    \r\n    switch (action.type){\r\n        case UserActionTypes.ADD_USER:\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        case UserActionTypes.DELETE_USER:\r\n            return {\r\n                ...state,\r\n                user: INITIAL_STATE.user\r\n            }\r\n\r\n        case UserActionTypes.UPDATE_USER:\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n\r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\nexport default userReducer","import {combineReducers } from 'redux'\r\n\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport selectedDateReducer from './date/date.reducer';\r\nimport taskReducer from './tasks/tasks.reducer';\r\nimport userReducer from './user/user.reducer';\r\n\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n  };\r\n  \r\n  const rootReducer = combineReducers({\r\n      date : selectedDateReducer,\r\n      task : taskReducer,\r\n      user : userReducer\r\n\r\n})\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import { createStore, applyMiddleware} from 'redux'\r\nimport logger from 'redux-logger'\r\n\r\n\r\nimport rootReducer from './root-reducer'\r\n\r\n// o  middlewarer logger será útil para debuggar, \r\n// já que irá printar o que está acontecendo\r\nconst middlewarers = [logger] \r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewarers))\r\n\r\n\r\n\r\nexport default {store};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//redux\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store';\n/*\nTO DEPLOY:\n\ngit add .\n\ngit commit -m \"\"\n\ngit push\n\nnpm run deploy\n\n*/\n\nReactDOM.render(\n  <Provider store = {store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}